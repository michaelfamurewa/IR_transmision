
NEC_inspiration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d5c  08004d5c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d64  08004d64  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d64  08004d64  00005d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d68  08004d68  00005d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000006c  08004dd8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08004dd8  00006610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de90  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f27  00000000  00000000  00013f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00015e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  00016b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a77  00000000  00000000  000175d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1da  00000000  00000000  0003a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ceb  00000000  00000000  0004922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f20  00000000  00000000  0011bf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cd8 	.word	0x08004cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004cd8 	.word	0x08004cd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	2b00      	cmp	r3, #0
 8000602:	d013      	beq.n	800062c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000604:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000608:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800060c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00b      	beq.n	800062c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000614:	e000      	b.n	8000618 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000616:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000618:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f9      	beq.n	8000616 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000622:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char* msg = "Hello World!";
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <main+0x54>)
 8000644:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff17 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f825 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fa1b 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f9ef 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000656:	f000 f88d 	bl	8000774 <MX_TIM2_Init>
  MX_TIM3_Init();
 800065a:	f000 f901 	bl	8000860 <MX_TIM3_Init>
  MX_TIM4_Init();
 800065e:	f000 f94d 	bl	80008fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000662:	f000 f999 	bl	8000998 <MX_TIM5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(systemStatus == RECEIVING){
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <main+0x58>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <main+0x38>
		  process_signals();
 8000670:	f000 facc 	bl	8000c0c <process_signals>
	  }

	  owc_transmit(msg, strlen(msg));
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff fdcb 	bl	8000210 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 fa71 	bl	8000b68 <owc_transmit>
	  HAL_Delay(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800068a:	f000 ff67 	bl	800155c <HAL_Delay>
	  if(systemStatus == RECEIVING){
 800068e:	e7ea      	b.n	8000666 <main+0x2a>
 8000690:	08004cf0 	.word	0x08004cf0
 8000694:	20000000 	.word	0x20000000

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fcf1 	bl	800408e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd8>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd44 	bl	80021b4 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 fc75 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f9e4 	bl	8001b20 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 fc5f 	bl	8001020 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	@ 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1462 - 1;
 80007b8:	4b28      	ldr	r3, [pc, #160]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007ba:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 80007be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b25      	ldr	r3, [pc, #148]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007cc:	4823      	ldr	r0, [pc, #140]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007ce:	f001 ff8f 	bl	80026f0 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007d8:	f000 fc22 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e6:	4619      	mov	r1, r3
 80007e8:	481c      	ldr	r0, [pc, #112]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007ea:	f002 fbd9 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007f4:	f000 fc14 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f8:	4818      	ldr	r0, [pc, #96]	@ (800085c <MX_TIM2_Init+0xe8>)
 80007fa:	f002 f88e 	bl	800291a <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000804:	f000 fc0c 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4619      	mov	r1, r3
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_TIM2_Init+0xe8>)
 8000818:	f002 ffce 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000822:	f000 fbfd 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000826:	2360      	movs	r3, #96	@ 0x60
 8000828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 146;
 800082a:	2392      	movs	r3, #146	@ 0x92
 800082c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM2_Init+0xe8>)
 800083e:	f002 faed 	bl	8002e1c <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000848:	f000 fbea 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM2_Init+0xe8>)
 800084e:	f000 fc85 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3738      	adds	r7, #56	@ 0x38
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000088 	.word	0x20000088

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_TIM3_Init+0x94>)
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <MX_TIM3_Init+0x98>)
 8000880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_TIM3_Init+0x94>)
 8000884:	2253      	movs	r2, #83	@ 0x53
 8000886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_TIM3_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_TIM3_Init+0x94>)
 8000890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000894:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_TIM3_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a2:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <MX_TIM3_Init+0x94>)
 80008a4:	f001 ff24 	bl	80026f0 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 fbb7 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_TIM3_Init+0x94>)
 80008c0:	f002 fb6e 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fba9 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <MX_TIM3_Init+0x94>)
 80008dc:	f002 ff6c 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008e6:	f000 fb9b 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d0 	.word	0x200000d0
 80008f8:	40000400 	.word	0x40000400

080008fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM4_Init+0x94>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_TIM4_Init+0x98>)
 800091c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM4_Init+0x94>)
 8000920:	2253      	movs	r2, #83	@ 0x53
 8000922:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM4_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_TIM4_Init+0x94>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_TIM4_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM4_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <MX_TIM4_Init+0x94>)
 8000940:	f001 fed6 	bl	80026f0 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 fb69 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_TIM4_Init+0x94>)
 800095c:	f002 fb20 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 fb5b 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_TIM4_Init+0x94>)
 8000978:	f002 ff1e 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 fb4d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000118 	.word	0x20000118
 8000994:	40000800 	.word	0x40000800

08000998 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <MX_TIM5_Init+0x98>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000 - 1;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009c8:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80009cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009dc:	f001 fe88 	bl	80026f0 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 fb1b 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_TIM5_Init+0x94>)
 80009f8:	f002 fad2 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fb0d 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <MX_TIM5_Init+0x94>)
 8000a14:	f002 fed0 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000a1e:	f000 faff 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000160 	.word	0x20000160
 8000a30:	40000c00 	.word	0x40000c00

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f002 ff34 	bl	80038d8 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 fad3 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001a8 	.word	0x200001a8
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a1f      	ldr	r2, [pc, #124]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b14:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <MX_GPIO_Init+0xd8>)
 8000b26:	f000 fe4f 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OWC_RX_Pin */
  GPIO_InitStruct.Pin = OWC_RX_Pin;
 8000b2a:	2340      	movs	r3, #64	@ 0x40
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OWC_RX_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <MX_GPIO_Init+0xdc>)
 8000b40:	f000 fe42 	bl	80017c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2017      	movs	r0, #23
 8000b4a:	f000 fe06 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4e:	2017      	movs	r0, #23
 8000b50:	f000 fe1f 	bl	8001792 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020000 	.word	0x40020000

08000b68 <owc_transmit>:

/* USER CODE BEGIN 4 */

static void owc_transmit(uint8_t* data, uint8_t size){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]

	systemStatus = TRANSMITTING;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <owc_transmit+0x48>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]

	memcpy(txDataBuffer, data, size);
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <owc_transmit+0x4c>)
 8000b82:	f003 fb00 	bl	8004186 <memcpy>
	txDataLength = size;
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <owc_transmit+0x50>)
 8000b8c:	801a      	strh	r2, [r3, #0]
	txStatus = FRAME_PULSE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <owc_transmit+0x54>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim4, 100);
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <owc_transmit+0x58>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2264      	movs	r2, #100	@ 0x64
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <owc_transmit+0x58>)
 8000b9e:	2264      	movs	r2, #100	@ 0x64
 8000ba0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <owc_transmit+0x58>)
 8000ba4:	f001 fe1a 	bl	80027dc <HAL_TIM_Base_Start_IT>

}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000398 	.word	0x20000398
 8000bb8:	200004b0 	.word	0x200004b0
 8000bbc:	20000394 	.word	0x20000394
 8000bc0:	20000118 	.word	0x20000118

08000bc4 <enqueue_signal>:

static void enqueue_signal(uint16_t signal){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]

	uint8_t nextindex = (signalBuffer.head + 1) % 64;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <enqueue_signal+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	425a      	negs	r2, r3
 8000bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bdc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000be0:	bf58      	it	pl
 8000be2:	4253      	negpl	r3, r2
 8000be4:	73fb      	strb	r3, [r7, #15]

	signalBuffer.items[signalBuffer.head] = signal;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <enqueue_signal+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <enqueue_signal+0x44>)
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	805a      	strh	r2, [r3, #2]
	signalBuffer.head = nextindex;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <enqueue_signal+0x44>)
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	7013      	strb	r3, [r2, #0]

}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20000310 	.word	0x20000310

08000c0c <process_signals>:

static void process_signals(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

	while(signalBuffer.head != signalBuffer.tail){
 8000c12:	e05d      	b.n	8000cd0 <process_signals+0xc4>

		currentSignal = signalBuffer.items[signalBuffer.tail];
 8000c14:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <process_signals+0xdc>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ce8 <process_signals+0xdc>)
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	885b      	ldrh	r3, [r3, #2]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <process_signals+0xe0>)
 8000c26:	801a      	strh	r2, [r3, #0]

		if(currentSignal >= 750){
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <process_signals+0xe0>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d906      	bls.n	8000c42 <process_signals+0x36>

			printf("Received: %s\n\r", rxDataBuffer);
 8000c34:	492e      	ldr	r1, [pc, #184]	@ (8000cf0 <process_signals+0xe4>)
 8000c36:	482f      	ldr	r0, [pc, #188]	@ (8000cf4 <process_signals+0xe8>)
 8000c38:	f003 f9d4 	bl	8003fe4 <iprintf>
			//HAL_UART_Transmit(&huart2, (uint8_t*)rxDataBuffer, rxDataIndex + 3, HAL_MAX_DELAY);
			reset_rx_state();
 8000c3c:	f000 f860 	bl	8000d00 <reset_rx_state>
			return;
 8000c40:	e04e      	b.n	8000ce0 <process_signals+0xd4>
		}

		if(rxBitIndex >= 8){
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <process_signals+0xec>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	d90a      	bls.n	8000c62 <process_signals+0x56>
			rxDataIndex++;
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <process_signals+0xf0>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <process_signals+0xf0>)
 8000c58:	801a      	strh	r2, [r3, #0]
			rxBitIndex = 0;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <process_signals+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			continue;
 8000c60:	e036      	b.n	8000cd0 <process_signals+0xc4>
		}

		bool bitValue = currentSignal <= 150 ? 1 : 0;
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <process_signals+0xe0>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b96      	cmp	r3, #150	@ 0x96
 8000c68:	bf94      	ite	ls
 8000c6a:	2301      	movls	r3, #1
 8000c6c:	2300      	movhi	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
		rxDataBuffer[rxDataIndex] |= bitValue ? (0x80 >> rxBitIndex) : 0;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <process_signals+0x78>
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <process_signals+0xec>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	4113      	asrs	r3, r2
 8000c82:	e000      	b.n	8000c86 <process_signals+0x7a>
 8000c84:	2300      	movs	r3, #0
 8000c86:	4a1d      	ldr	r2, [pc, #116]	@ (8000cfc <process_signals+0xf0>)
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	b291      	uxth	r1, r2
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <process_signals+0xe4>)
 8000c90:	5c12      	ldrb	r2, [r2, r0]
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	b252      	sxtb	r2, r2
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	b2d9      	uxtb	r1, r3
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <process_signals+0xe4>)
 8000ca2:	5499      	strb	r1, [r3, r2]
		uint8_t nextBufferIndex = (signalBuffer.tail + 1) % 64;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <process_signals+0xdc>)
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	425a      	negs	r2, r3
 8000cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cb2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cb6:	bf58      	it	pl
 8000cb8:	4253      	negpl	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
		signalBuffer.tail = nextBufferIndex;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <process_signals+0xdc>)
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	7053      	strb	r3, [r2, #1]
		rxBitIndex++;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <process_signals+0xec>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <process_signals+0xec>)
 8000cce:	701a      	strb	r2, [r3, #0]
	while(signalBuffer.head != signalBuffer.tail){
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <process_signals+0xdc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <process_signals+0xdc>)
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d199      	bne.n	8000c14 <process_signals+0x8>
	}
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000310 	.word	0x20000310
 8000cec:	20000392 	.word	0x20000392
 8000cf0:	200001f4 	.word	0x200001f4
 8000cf4:	08004d00 	.word	0x08004d00
 8000cf8:	2000030e 	.word	0x2000030e
 8000cfc:	2000030c 	.word	0x2000030c

08000d00 <reset_rx_state>:

void reset_rx_state(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	systemStatus = IDLE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <reset_rx_state+0x44>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	701a      	strb	r2, [r3, #0]
	memset(rxDataBuffer, 0, 280);
 8000d0a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000d0e:	2100      	movs	r1, #0
 8000d10:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <reset_rx_state+0x48>)
 8000d12:	f003 f9bc 	bl	800408e <memset>
	memset(signalBuffer.items, 0, 64);
 8000d16:	2240      	movs	r2, #64	@ 0x40
 8000d18:	2100      	movs	r1, #0
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <reset_rx_state+0x4c>)
 8000d1c:	f003 f9b7 	bl	800408e <memset>
	rxBitIndex = 0;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <reset_rx_state+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	rxDataIndex = 0;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <reset_rx_state+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
	triggerCount = 0;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <reset_rx_state+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	signalBuffer.head = 0;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <reset_rx_state+0x5c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	signalBuffer.tail = 0;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <reset_rx_state+0x5c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000000 	.word	0x20000000
 8000d48:	200001f4 	.word	0x200001f4
 8000d4c:	20000312 	.word	0x20000312
 8000d50:	2000030e 	.word	0x2000030e
 8000d54:	2000030c 	.word	0x2000030c
 8000d58:	200001f0 	.word	0x200001f0
 8000d5c:	20000310 	.word	0x20000310

08000d60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]

	uint16_t timeStamp =  __HAL_TIM_GET_COUNTER(&htim3);
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d70:	81fb      	strh	r3, [r7, #14]
	uint16_t deltaTime = timeStamp - lastTriggerTime;
 8000d72:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	89fa      	ldrh	r2, [r7, #14]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	81bb      	strh	r3, [r7, #12]
	lastTriggerTime = timeStamp;
 8000d7e:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	8013      	strh	r3, [r2, #0]
	triggerCount++;
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d90:	701a      	strb	r2, [r3, #0]

	if(triggerCount < 2){
 8000d92:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d937      	bls.n	8000e0c <HAL_GPIO_EXTI_Callback+0xac>
		return;
	}

	if(triggerCount >= 3){
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d90b      	bls.n	8000dbe <HAL_GPIO_EXTI_Callback+0x5e>
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
		enqueue_signal(deltaTime);
 8000dae:	89bb      	ldrh	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff07 	bl	8000bc4 <enqueue_signal>
		triggerCount = 1;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
		return;
 8000dbc:	e027      	b.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
	}

	if(systemStatus == IDLE && (deltaTime >= 250 && deltaTime <= 450)){
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d10d      	bne.n	8000de4 <HAL_GPIO_EXTI_Callback+0x84>
 8000dc8:	89bb      	ldrh	r3, [r7, #12]
 8000dca:	2bf9      	cmp	r3, #249	@ 0xf9
 8000dcc:	d90a      	bls.n	8000de4 <HAL_GPIO_EXTI_Callback+0x84>
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000dd4:	d806      	bhi.n	8000de4 <HAL_GPIO_EXTI_Callback+0x84>
	    systemStatus = RECEIVING;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim5);
 8000ddc:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000dde:	f001 fcfd 	bl	80027dc <HAL_TIM_Base_Start_IT>
	    return;
 8000de2:	e014      	b.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
	}

	if(systemStatus == RECEIVING && (deltaTime >= 250 && deltaTime <= 450)){
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000df2:	d90c      	bls.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000dfa:	d808      	bhi.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
		HAL_TIM_Base_Stop_IT(&htim5);
 8000dfc:	4808      	ldr	r0, [pc, #32]	@ (8000e20 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000dfe:	f001 fd5d 	bl	80028bc <HAL_TIM_Base_Stop_IT>
		enqueue_signal(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e06:	f7ff fedd 	bl	8000bc4 <enqueue_signal>
		return;
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_EXTI_Callback+0xae>
		return;
 8000e0c:	bf00      	nop
	}

	//reset_rx_timeout();
}
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	200001f2 	.word	0x200001f2
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	20000160 	.word	0x20000160
 8000e24:	20000000 	.word	0x20000000

08000e28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

	if(htim == &htim5){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a61      	ldr	r2, [pc, #388]	@ (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d105      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim5);
 8000e38:	485f      	ldr	r0, [pc, #380]	@ (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e3a:	f001 fd3f 	bl	80028bc <HAL_TIM_Base_Stop_IT>
		reset_rx_state();
 8000e3e:	f7ff ff5f 	bl	8000d00 <reset_rx_state>
		return;
 8000e42:	e0b6      	b.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x18a>
	}

	switch(txStatus){
 8000e44:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d05c      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	f300 8094 	bgt.w	8000f7c <HAL_TIM_PeriodElapsedCallback+0x154>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x36>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d023      	beq.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000e5c:	e08e      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x154>

	case FRAME_PULSE:

		__HAL_TIM_SET_AUTORELOAD(&htim4, 320 - 1);
 8000e5e:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e68:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e6a:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e6e:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4854      	ldr	r0, [pc, #336]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e74:	f001 fdaa 	bl	80029cc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e78:	4b51      	ldr	r3, [pc, #324]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
		frameSymbolCount++;
 8000e80:	4b51      	ldr	r3, [pc, #324]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e8c:	701a      	strb	r2, [r3, #0]
		txStatus = frameSymbolCount <= 1 ? BIT_PULSE : END_OF_TRANSMISSION;
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d801      	bhi.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x74>
 8000e98:	2201      	movs	r2, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x76>
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4b47      	ldr	r3, [pc, #284]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ea0:	701a      	strb	r2, [r3, #0]

		break;
 8000ea2:	e086      	b.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x18a>

	case BIT_PULSE:

		__HAL_TIM_SET_AUTORELOAD(&htim4, 124 - 1);
 8000ea4:	4b46      	ldr	r3, [pc, #280]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	227b      	movs	r2, #123	@ 0x7b
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000eae:	227b      	movs	r2, #123	@ 0x7b
 8000eb0:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4843      	ldr	r0, [pc, #268]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000eb6:	f001 fd89 	bl	80029cc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000eba:	4b41      	ldr	r3, [pc, #260]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24

		txDataBit = txDataBuffer[txDataIndex] & (0x80 >> txBitIndex);
 8000ec2:	4b42      	ldr	r3, [pc, #264]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b41      	ldr	r3, [pc, #260]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ecc:	5c9b      	ldrb	r3, [r3, r2]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b40      	ldr	r3, [pc, #256]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	410b      	asrs	r3, r1
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000eea:	701a      	strb	r2, [r3, #0]
		txGapLength = txDataBit ? 104 : 208;
 8000eec:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000ef6:	2268      	movs	r2, #104	@ 0x68
 8000ef8:	e000      	b.n	8000efc <HAL_TIM_PeriodElapsedCallback+0xd4>
 8000efa:	22d0      	movs	r2, #208	@ 0xd0
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000efe:	801a      	strh	r2, [r3, #0]
		txStatus = BIT_GAP;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	701a      	strb	r2, [r3, #0]

		break;
 8000f06:	e054      	b.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x18a>

	case BIT_GAP:

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	482e      	ldr	r0, [pc, #184]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f0c:	f001 fe26 	bl	8002b5c <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_AUTORELOAD(&htim4, txGapLength - 1);
 8000f10:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f2a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	@ 0x24
		txStatus = BIT_PULSE;
 8000f34:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
		txBitIndex++;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f46:	701a      	strb	r2, [r3, #0]

		if(txBitIndex >= 8){
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d909      	bls.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x13e>
			txBitIndex = 0;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			txDataIndex++;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f64:	801a      	strh	r2, [r3, #0]
		}
		if(txDataIndex >= txDataLength){
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d31d      	bcc.n	8000fb0 <HAL_TIM_PeriodElapsedCallback+0x188>
			txStatus = FRAME_PULSE;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000f7a:	e019      	b.n	8000fb0 <HAL_TIM_PeriodElapsedCallback+0x188>

	default:

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f80:	f001 fdec 	bl	8002b5c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim4);
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f86:	f001 fc02 	bl	800278e <HAL_TIM_Base_Stop>
		frameSymbolCount = 0;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
		txBitIndex = 0;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		txDataIndex = 0;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	801a      	strh	r2, [r3, #0]
		txDataBit = 0;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
		txDataLength = 0;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
		systemStatus = IDLE;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
		return;
 8000fae:	e000      	b.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x18a>
		break;
 8000fb0:	bf00      	nop

	}

}
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000160 	.word	0x20000160
 8000fbc:	20000394 	.word	0x20000394
 8000fc0:	20000118 	.word	0x20000118
 8000fc4:	20000088 	.word	0x20000088
 8000fc8:	200004b8 	.word	0x200004b8
 8000fcc:	200004b4 	.word	0x200004b4
 8000fd0:	20000398 	.word	0x20000398
 8000fd4:	200004b3 	.word	0x200004b3
 8000fd8:	200004b2 	.word	0x200004b2
 8000fdc:	200004b6 	.word	0x200004b6
 8000fe0:	200004b0 	.word	0x200004b0
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <_write>:

int _write(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e009      	b.n	800100e <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	60ba      	str	r2, [r7, #8]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff faf2 	bl	80005ec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbf1      	blt.n	8000ffa <_write+0x12>
  }
  return len;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106a:	2007      	movs	r0, #7
 800106c:	f000 fb6a 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108c:	d10e      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010aa:	e04a      	b.n	8001142 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a27      	ldr	r2, [pc, #156]	@ (8001150 <HAL_TIM_Base_MspInit+0xd4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10e      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
}
 80010d2:	e036      	b.n	8001142 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <HAL_TIM_Base_MspInit+0xd8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d116      	bne.n	800110c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a19      	ldr	r2, [pc, #100]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	201e      	movs	r0, #30
 8001100:	f000 fb2b 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001104:	201e      	movs	r0, #30
 8001106:	f000 fb44 	bl	8001792 <HAL_NVIC_EnableIRQ>
}
 800110a:	e01a      	b.n	8001142 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <HAL_TIM_Base_MspInit+0xdc>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d115      	bne.n	8001142 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_TIM_Base_MspInit+0xd0>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2032      	movs	r0, #50	@ 0x32
 8001138:	f000 fb0f 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800113c:	2032      	movs	r0, #50	@ 0x32
 800113e:	f000 fb28 	bl	8001792 <HAL_NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40000400 	.word	0x40000400
 8001154:	40000800 	.word	0x40000800
 8001158:	40000c00 	.word	0x40000c00

0800115c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117c:	d11d      	bne.n	80011ba <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_TIM_MspPostInit+0x6c>)
 80011b6:	f000 fb07 	bl	80017c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_UART_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12b      	bne.n	8001246 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_UART_MspInit+0x88>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_UART_MspInit+0x88>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <HAL_UART_MspInit+0x88>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001236:	2307      	movs	r3, #7
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_UART_MspInit+0x8c>)
 8001242:	f000 fac1 	bl	80017c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 f933 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OWC_RX_Pin);
 80012be:	2040      	movs	r0, #64	@ 0x40
 80012c0:	f000 fc16 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM4_IRQHandler+0x10>)
 80012ce:	f001 fcb5 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000118 	.word	0x20000118

080012dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM5_IRQHandler+0x10>)
 80012e2:	f001 fcab 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000160 	.word	0x20000160

080012f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:
  }
  return len;
}

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f002 feb2 	bl	800412c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	200004bc 	.word	0x200004bc
 80013fc:	20000610 	.word	0x20000610

08001400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001452:	f002 fe71 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f8f1 	bl	800063c <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001468:	08004d6c 	.word	0x08004d6c
  ldr r2, =_sbss
 800146c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001470:	20000610 	.word	0x20000610

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <HAL_Init+0x40>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_Init+0x40>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_Init+0x40>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f94f 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fdbe 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f967 	bl	80017ae <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f92f 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000004 	.word	0x20000004
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000008 	.word	0x20000008

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c
 8001540:	200004c0 	.word	0x200004c0

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200004c0 	.word	0x200004c0

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <__NVIC_SetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	@ (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e165      	b.n	8001ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8154 	bne.w	8001aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	2b02      	cmp	r3, #2
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80ae 	beq.w	8001aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac8 <HAL_GPIO_Init+0x300>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac8 <HAL_GPIO_Init+0x300>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac8 <HAL_GPIO_Init+0x300>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196a:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_GPIO_Init+0x304>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad0 <HAL_GPIO_Init+0x308>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad4 <HAL_GPIO_Init+0x30c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad8 <HAL_GPIO_Init+0x310>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	@ (8001adc <HAL_GPIO_Init+0x314>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae0 <HAL_GPIO_Init+0x318>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x20a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae4 <HAL_GPIO_Init+0x31c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x206>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a49      	ldr	r2, [pc, #292]	@ (8001ae8 <HAL_GPIO_Init+0x320>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x202>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e00c      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e00a      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x21c>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	@ (8001acc <HAL_GPIO_Init+0x304>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a02:	4b3a      	ldr	r3, [pc, #232]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a26:	4a31      	ldr	r2, [pc, #196]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a50:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa4:	4a11      	ldr	r2, [pc, #68]	@ (8001aec <HAL_GPIO_Init+0x324>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f ae96 	bls.w	80017e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40021400 	.word	0x40021400
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f926 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0cc      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b68      	ldr	r3, [pc, #416]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d90c      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b65      	ldr	r3, [pc, #404]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b8      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b74:	4b59      	ldr	r3, [pc, #356]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b8c:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	494d      	ldr	r1, [pc, #308]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d044      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d119      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e067      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4934      	ldr	r1, [pc, #208]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff fc98 	bl	8001544 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff fc94 	bl	8001544 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d20c      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e032      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4916      	ldr	r1, [pc, #88]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490e      	ldr	r1, [pc, #56]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca6:	f000 f855 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490a      	ldr	r1, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	4a09      	ldr	r2, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fbf8 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08004d10 	.word	0x08004d10
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08004d20 	.word	0x08004d20

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d30:	f7ff ffdc 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0b5b      	lsrs	r3, r3, #13
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	@ (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08004d20 	.word	0x08004d20

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b0ae      	sub	sp, #184	@ 0xb8
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7a:	4bcb      	ldr	r3, [pc, #812]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	f200 8206 	bhi.w	8002194 <HAL_RCC_GetSysClockFreq+0x440>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08002195 	.word	0x08002195
 8001d98:	08002195 	.word	0x08002195
 8001d9c:	08002195 	.word	0x08002195
 8001da0:	08001dcd 	.word	0x08001dcd
 8001da4:	08002195 	.word	0x08002195
 8001da8:	08002195 	.word	0x08002195
 8001dac:	08002195 	.word	0x08002195
 8001db0:	08001dd5 	.word	0x08001dd5
 8001db4:	08002195 	.word	0x08002195
 8001db8:	08002195 	.word	0x08002195
 8001dbc:	08002195 	.word	0x08002195
 8001dc0:	08001fc5 	.word	0x08001fc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4bb9      	ldr	r3, [pc, #740]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x358>)
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dca:	e1e7      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4bb8      	ldr	r3, [pc, #736]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dd2:	e1e3      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd4:	4bb4      	ldr	r3, [pc, #720]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de0:	4bb1      	ldr	r3, [pc, #708]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d071      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4bae      	ldr	r3, [pc, #696]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001df8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	f04f 0100 	mov.w	r1, #0
 8001e1e:	0159      	lsls	r1, r3, #5
 8001e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e24:	0150      	lsls	r0, r2, #5
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	1a51      	subs	r1, r2, r1
 8001e2e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e30:	4629      	mov	r1, r5
 8001e32:	eb63 0301 	sbc.w	r3, r3, r1
 8001e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e44:	4649      	mov	r1, r9
 8001e46:	018b      	lsls	r3, r1, #6
 8001e48:	4641      	mov	r1, r8
 8001e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e4e:	4641      	mov	r1, r8
 8001e50:	018a      	lsls	r2, r1, #6
 8001e52:	4641      	mov	r1, r8
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e58:	4649      	mov	r1, r9
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	00cb      	lsls	r3, r1, #3
 8001e70:	4641      	mov	r1, r8
 8001e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e76:	4641      	mov	r1, r8
 8001e78:	00ca      	lsls	r2, r1, #3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4622      	mov	r2, r4
 8001e82:	189b      	adds	r3, r3, r2
 8001e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e86:	462b      	mov	r3, r5
 8001e88:	460a      	mov	r2, r1
 8001e8a:	eb42 0303 	adc.w	r3, r2, r3
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	024b      	lsls	r3, r1, #9
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	024a      	lsls	r2, r1, #9
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ebc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ec0:	f7fe f9fe 	bl	80002c0 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ece:	e067      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed0:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001edc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eea:	2300      	movs	r3, #0
 8001eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0159      	lsls	r1, r3, #5
 8001f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f04:	0150      	lsls	r0, r2, #5
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f10:	4629      	mov	r1, r5
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f24:	4649      	mov	r1, r9
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2e:	4641      	mov	r1, r8
 8001f30:	018a      	lsls	r2, r1, #6
 8001f32:	4641      	mov	r1, r8
 8001f34:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f38:	4649      	mov	r1, r9
 8001f3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f52:	4692      	mov	sl, r2
 8001f54:	469b      	mov	fp, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	eb1a 0303 	adds.w	r3, sl, r3
 8001f5c:	623b      	str	r3, [r7, #32]
 8001f5e:	462b      	mov	r3, r5
 8001f60:	eb4b 0303 	adc.w	r3, fp, r3
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f88:	2200      	movs	r2, #0
 8001f8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f92:	f7fe f995 	bl	80002c0 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fa0:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc2:	e0eb      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d06b      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fe6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fee:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ff4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	f04f 0000 	mov.w	r0, #0
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	0159      	lsls	r1, r3, #5
 8002006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800200a:	0150      	lsls	r0, r2, #5
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4621      	mov	r1, r4
 8002012:	1a51      	subs	r1, r2, r1
 8002014:	61b9      	str	r1, [r7, #24]
 8002016:	4629      	mov	r1, r5
 8002018:	eb63 0301 	sbc.w	r3, r3, r1
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800202a:	4659      	mov	r1, fp
 800202c:	018b      	lsls	r3, r1, #6
 800202e:	4651      	mov	r1, sl
 8002030:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002034:	4651      	mov	r1, sl
 8002036:	018a      	lsls	r2, r1, #6
 8002038:	4651      	mov	r1, sl
 800203a:	ebb2 0801 	subs.w	r8, r2, r1
 800203e:	4659      	mov	r1, fp
 8002040:	eb63 0901 	sbc.w	r9, r3, r1
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002050:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002054:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002058:	4690      	mov	r8, r2
 800205a:	4699      	mov	r9, r3
 800205c:	4623      	mov	r3, r4
 800205e:	eb18 0303 	adds.w	r3, r8, r3
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	462b      	mov	r3, r5
 8002066:	eb49 0303 	adc.w	r3, r9, r3
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002078:	4629      	mov	r1, r5
 800207a:	024b      	lsls	r3, r1, #9
 800207c:	4621      	mov	r1, r4
 800207e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002082:	4621      	mov	r1, r4
 8002084:	024a      	lsls	r2, r1, #9
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800208e:	2200      	movs	r2, #0
 8002090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002092:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002094:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002098:	f7fe f912 	bl	80002c0 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020a6:	e065      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x420>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x458>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	2200      	movs	r2, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	4611      	mov	r1, r2
 80020c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80020c6:	2300      	movs	r3, #0
 80020c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80020ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020ce:	4642      	mov	r2, r8
 80020d0:	464b      	mov	r3, r9
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	0159      	lsls	r1, r3, #5
 80020dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e0:	0150      	lsls	r0, r2, #5
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4641      	mov	r1, r8
 80020e8:	1a51      	subs	r1, r2, r1
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	4649      	mov	r1, r9
 80020ee:	eb63 0301 	sbc.w	r3, r3, r1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002100:	4659      	mov	r1, fp
 8002102:	018b      	lsls	r3, r1, #6
 8002104:	4651      	mov	r1, sl
 8002106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210a:	4651      	mov	r1, sl
 800210c:	018a      	lsls	r2, r1, #6
 800210e:	4651      	mov	r1, sl
 8002110:	1a54      	subs	r4, r2, r1
 8002112:	4659      	mov	r1, fp
 8002114:	eb63 0501 	sbc.w	r5, r3, r1
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	00eb      	lsls	r3, r5, #3
 8002122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002126:	00e2      	lsls	r2, r4, #3
 8002128:	4614      	mov	r4, r2
 800212a:	461d      	mov	r5, r3
 800212c:	4643      	mov	r3, r8
 800212e:	18e3      	adds	r3, r4, r3
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	464b      	mov	r3, r9
 8002134:	eb45 0303 	adc.w	r3, r5, r3
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002146:	4629      	mov	r1, r5
 8002148:	028b      	lsls	r3, r1, #10
 800214a:	4621      	mov	r1, r4
 800214c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002150:	4621      	mov	r1, r4
 8002152:	028a      	lsls	r2, r1, #10
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800215c:	2200      	movs	r2, #0
 800215e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002160:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002162:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002166:	f7fe f8ab 	bl	80002c0 <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4613      	mov	r3, r2
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002174:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0f1b      	lsrs	r3, r3, #28
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002192:	e003      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800219a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	37b8      	adds	r7, #184	@ 0xb8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	00f42400 	.word	0x00f42400

080021b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e28d      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8083 	beq.w	80022da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021d4:	4b94      	ldr	r3, [pc, #592]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d019      	beq.n	8002214 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021e0:	4b91      	ldr	r3, [pc, #580]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021f8:	d00c      	beq.n	8002214 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d112      	bne.n	800222c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002212:	d10b      	bne.n	800222c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	4b84      	ldr	r3, [pc, #528]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x124>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e25a      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x90>
 8002236:	4b7c      	ldr	r3, [pc, #496]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7b      	ldr	r2, [pc, #492]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xcc>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0xb4>
 800224e:	4b76      	ldr	r3, [pc, #472]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a75      	ldr	r2, [pc, #468]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a72      	ldr	r2, [pc, #456]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xcc>
 8002268:	4b6f      	ldr	r3, [pc, #444]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6e      	ldr	r2, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b6c      	ldr	r3, [pc, #432]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6b      	ldr	r2, [pc, #428]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f95c 	bl	8001544 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f958 	bl	8001544 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e21f      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xdc>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff f948 	bl	8001544 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff f944 	bl	8001544 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e20b      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x104>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d06f      	beq.n	80023c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022e6:	4b50      	ldr	r3, [pc, #320]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d017      	beq.n	8002322 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b44      	ldr	r3, [pc, #272]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x186>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1d3      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4937      	ldr	r1, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_RCC_OscConfig+0x278>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7ff f8f1 	bl	8001544 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff f8ed 	bl	8001544 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e1b4      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4925      	ldr	r1, [pc, #148]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCC_OscConfig+0x278>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f8d0 	bl	8001544 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7ff f8cc 	bl	8001544 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e193      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d036      	beq.n	8002440 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7ff f8b0 	bl	8001544 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff f8ac 	bl	8001544 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e173      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x274>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x234>
 8002406:	e01b      	b.n	8002440 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7ff f899 	bl	8001544 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	e00e      	b.n	8002434 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7ff f895 	bl	8001544 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d907      	bls.n	8002434 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e15c      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b8a      	ldr	r3, [pc, #552]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ea      	bne.n	8002416 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8097 	beq.w	800257c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b83      	ldr	r3, [pc, #524]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b7f      	ldr	r3, [pc, #508]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4a7e      	ldr	r2, [pc, #504]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	@ 0x40
 800246e:	4b7c      	ldr	r3, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b79      	ldr	r3, [pc, #484]	@ (8002664 <HAL_RCC_OscConfig+0x4b0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b76      	ldr	r3, [pc, #472]	@ (8002664 <HAL_RCC_OscConfig+0x4b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a75      	ldr	r2, [pc, #468]	@ (8002664 <HAL_RCC_OscConfig+0x4b0>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7ff f855 	bl	8001544 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7ff f851 	bl	8001544 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e118      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <HAL_RCC_OscConfig+0x4b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x31e>
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x358>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x340>
 80024da:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0x358>
 80024f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	4a59      	ldr	r2, [pc, #356]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002500:	4b57      	ldr	r3, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a56      	ldr	r2, [pc, #344]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7ff f816 	bl	8001544 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7ff f812 	bl	8001544 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0d7      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ee      	beq.n	800251c <HAL_RCC_OscConfig+0x368>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7ff f800 	bl	8001544 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fffc 	bl	8001544 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0c1      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b3b      	ldr	r3, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	4a3a      	ldr	r2, [pc, #232]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80ad 	beq.w	80026e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002586:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d060      	beq.n	8002654 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d145      	bne.n	8002626 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b33      	ldr	r3, [pc, #204]	@ (8002668 <HAL_RCC_OscConfig+0x4b4>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe ffd0 	bl	8001544 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe ffcc 	bl	8001544 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e093      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	071b      	lsls	r3, r3, #28
 80025f2:	491b      	ldr	r1, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4b4>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe ffa1 	bl	8001544 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe ff9d 	bl	8001544 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e064      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x452>
 8002624:	e05c      	b.n	80026e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_OscConfig+0x4b4>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ff8a 	bl	8001544 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe ff86 	bl	8001544 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04d      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x480>
 8002652:	e045      	b.n	80026e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e040      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <HAL_RCC_OscConfig+0x538>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d030      	beq.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d129      	bne.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d122      	bne.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d119      	bne.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d10f      	bne.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e041      	b.n	8002786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fcb0 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fd26 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <HAL_TIM_Base_Stop+0x38>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_Base_Stop+0x38>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04e      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	@ (80028a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d010      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e007      	b.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40010400 	.word	0x40010400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40001800 	.word	0x40001800

080028bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <HAL_TIM_Base_Stop_IT+0x48>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a1a      	ldr	r2, [r3, #32]
 80028ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_Base_Stop_IT+0x48>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e041      	b.n	80029b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f839 	bl	80029b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f000 fc11 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_TIM_PWM_Start+0x24>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e022      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d109      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x3e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e015      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d109      	bne.n	8002a24 <HAL_TIM_PWM_Start+0x58>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e008      	b.n	8002a36 <HAL_TIM_PWM_Start+0x6a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07c      	b.n	8002b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0x82>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a4c:	e013      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x92>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xa2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a6c:	e003      	b.n	8002a76 <HAL_TIM_PWM_Start+0xaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fe74 	bl	800376c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <HAL_TIM_PWM_Start+0x174>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <HAL_TIM_PWM_Start+0x178>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_PWM_Start+0xd0>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_PWM_Start+0xd2>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_TIM_PWM_Start+0x174>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac4:	d01d      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_TIM_PWM_Start+0x17c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <HAL_TIM_PWM_Start+0x180>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_TIM_PWM_Start+0x184>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <HAL_TIM_PWM_Start+0x178>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_TIM_PWM_Start+0x188>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x136>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <HAL_TIM_PWM_Start+0x18c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d010      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	e007      	b.n	8002b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40001800 	.word	0x40001800

08002b5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fdfc 	bl	800376c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2e      	ldr	r2, [pc, #184]	@ (8002c34 <HAL_TIM_PWM_Stop+0xd8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIM_PWM_Stop+0x2c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2d      	ldr	r2, [pc, #180]	@ (8002c38 <HAL_TIM_PWM_Stop+0xdc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_TIM_PWM_Stop+0x30>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_TIM_PWM_Stop+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_TIM_PWM_Stop+0x66>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_PWM_Stop+0x66>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a1a      	ldr	r2, [r3, #32]
 8002bc8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_TIM_PWM_Stop+0x96>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_PWM_Stop+0x96>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Stop+0xa6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c00:	e013      	b.n	8002c2a <HAL_TIM_PWM_Stop+0xce>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Stop+0xb6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_PWM_Stop+0xce>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Stop+0xc6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c20:	e003      	b.n	8002c2a <HAL_TIM_PWM_Stop+0xce>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40010400 	.word	0x40010400

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d020      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01b      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0202 	mvn.w	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa5b 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa4d 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fa5e 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d020      	beq.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa35 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa27 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fa38 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0208 	mvn.w	r2, #8
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa0f 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa01 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fa12 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0210 	mvn.w	r2, #16
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9e9 	bl	8003142 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9db 	bl	800312e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f9ec 	bl	8003156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0201 	mvn.w	r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe f840 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd7c 	bl	80038c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00c      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9bd 	bl	800316a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0220 	mvn.w	r2, #32
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd4e 	bl	80038b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ae      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	f200 809f 	bhi.w	8002f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002f89 	.word	0x08002f89
 8002e58:	08002f89 	.word	0x08002f89
 8002e5c:	08002f89 	.word	0x08002f89
 8002e60:	08002ec5 	.word	0x08002ec5
 8002e64:	08002f89 	.word	0x08002f89
 8002e68:	08002f89 	.word	0x08002f89
 8002e6c:	08002f89 	.word	0x08002f89
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f89 	.word	0x08002f89
 8002e78:	08002f89 	.word	0x08002f89
 8002e7c:	08002f89 	.word	0x08002f89
 8002e80:	08002f47 	.word	0x08002f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa24 	bl	80032d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
      break;
 8002ec2:	e064      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa74 	bl	80033b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
      break;
 8002f04:	e043      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fac9 	bl	80034a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      break;
 8002f44:	e023      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fb1d 	bl	800358c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	61da      	str	r2, [r3, #28]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x1c>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b4      	b.n	8003126 <HAL_TIM_ConfigClockSource+0x186>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003002:	f000 8086 	beq.w	8003112 <HAL_TIM_ConfigClockSource+0x172>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b70      	cmp	r3, #112	@ 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa6>
 8003010:	2b70      	cmp	r3, #112	@ 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b60      	cmp	r3, #96	@ 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x11a>
 8003018:	2b60      	cmp	r3, #96	@ 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b50      	cmp	r3, #80	@ 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xfa>
 8003020:	2b50      	cmp	r3, #80	@ 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x13a>
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b30      	cmp	r3, #48	@ 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b30      	cmp	r3, #48	@ 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	f000 fb69 	bl	800372c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04f      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	f000 fb52 	bl	800372c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 fac6 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	@ 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fb1f 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 fae5 	bl	8003696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	@ 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fb0f 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 faa6 	bl	8003638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	@ 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 faff 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 faf6 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 800310a:	e003      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e000      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a46      	ldr	r2, [pc, #280]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319e:	d00f      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <TIM_Base_SetConfig+0x130>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a42      	ldr	r2, [pc, #264]	@ (80032b4 <TIM_Base_SetConfig+0x134>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a41      	ldr	r2, [pc, #260]	@ (80032b8 <TIM_Base_SetConfig+0x138>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a40      	ldr	r2, [pc, #256]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a35      	ldr	r2, [pc, #212]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d027      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <TIM_Base_SetConfig+0x130>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d023      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <TIM_Base_SetConfig+0x134>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a30      	ldr	r2, [pc, #192]	@ (80032b8 <TIM_Base_SetConfig+0x138>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2f      	ldr	r2, [pc, #188]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d017      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2e      	ldr	r2, [pc, #184]	@ (80032c0 <TIM_Base_SetConfig+0x140>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2d      	ldr	r2, [pc, #180]	@ (80032c4 <TIM_Base_SetConfig+0x144>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <TIM_Base_SetConfig+0x148>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <TIM_Base_SetConfig+0x14c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <TIM_Base_SetConfig+0x150>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <TIM_Base_SetConfig+0x154>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a10      	ldr	r2, [pc, #64]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]
  }
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40010400 	.word	0x40010400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800
 80032cc:	40001800 	.word	0x40001800
 80032d0:	40001c00 	.word	0x40001c00
 80032d4:	40002000 	.word	0x40002000

080032d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 0201 	bic.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <TIM_OC1_SetConfig+0xd8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC1_SetConfig+0x64>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10c      	bne.n	8003356 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0308 	bic.w	r3, r3, #8
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <TIM_OC1_SetConfig+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC1_SetConfig+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a14      	ldr	r2, [pc, #80]	@ (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400

080033b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 0210 	bic.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <TIM_OC2_SetConfig+0xe4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC2_SetConfig+0x68>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a21      	ldr	r2, [pc, #132]	@ (80034a0 <TIM_OC2_SetConfig+0xe8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10d      	bne.n	800343c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a17      	ldr	r2, [pc, #92]	@ (800349c <TIM_OC2_SetConfig+0xe4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC2_SetConfig+0x94>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a16      	ldr	r2, [pc, #88]	@ (80034a0 <TIM_OC2_SetConfig+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d113      	bne.n	8003474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40010400 	.word	0x40010400

080034a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <TIM_OC3_SetConfig+0xe0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x66>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <TIM_OC3_SetConfig+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC3_SetConfig+0xe0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_OC3_SetConfig+0x92>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC3_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40010000 	.word	0x40010000
 8003588:	40010400 	.word	0x40010400

0800358c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <TIM_OC4_SetConfig+0xa4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC4_SetConfig+0x68>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <TIM_OC4_SetConfig+0xa8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d109      	bne.n	8003608 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 030a 	bic.w	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f023 0210 	bic.w	r2, r3, #16
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 0307 	orr.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	431a      	orrs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2201      	movs	r2, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e05a      	b.n	8003886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d01d      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1d      	ldr	r2, [pc, #116]	@ (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1a      	ldr	r2, [pc, #104]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10c      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4313      	orrs	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40010400 	.word	0x40010400
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40001800 	.word	0x40001800

080038b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e042      	b.n	8003970 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fc64 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800391a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f82b 	bl	8003978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b0c0      	sub	sp, #256	@ 0x100
 800397e:	af00      	add	r7, sp, #0
 8003980:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	ea40 0301 	orr.w	r3, r0, r1
 80039a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039d0:	f021 010c 	bic.w	r1, r1, #12
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039de:	430b      	orrs	r3, r1
 80039e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f2:	6999      	ldr	r1, [r3, #24]
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	ea40 0301 	orr.w	r3, r0, r1
 80039fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8f      	ldr	r3, [pc, #572]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d005      	beq.n	8003a18 <UART_SetConfig+0xa0>
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b8d      	ldr	r3, [pc, #564]	@ (8003c48 <UART_SetConfig+0x2d0>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d104      	bne.n	8003a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a18:	f7fe f988 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8003a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a20:	e003      	b.n	8003a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a22:	f7fe f96f 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003a26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a34:	f040 810c 	bne.w	8003c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a52:	415b      	adcs	r3, r3
 8003a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	eb12 0801 	adds.w	r8, r2, r1
 8003a60:	4629      	mov	r1, r5
 8003a62:	eb43 0901 	adc.w	r9, r3, r1
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	eb18 0303 	adds.w	r3, r8, r3
 8003a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a88:	462b      	mov	r3, r5
 8003a8a:	eb49 0303 	adc.w	r3, r9, r3
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	18db      	adds	r3, r3, r3
 8003aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aac:	4613      	mov	r3, r2
 8003aae:	eb42 0303 	adc.w	r3, r2, r3
 8003ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003abc:	f7fc fc00 	bl	80002c0 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	011c      	lsls	r4, r3, #4
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	1891      	adds	r1, r2, r2
 8003ae6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ae8:	415b      	adcs	r3, r3
 8003aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af0:	4641      	mov	r1, r8
 8003af2:	eb12 0a01 	adds.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb43 0b01 	adc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b10:	4692      	mov	sl, r2
 8003b12:	469b      	mov	fp, r3
 8003b14:	4643      	mov	r3, r8
 8003b16:	eb1a 0303 	adds.w	r3, sl, r3
 8003b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb4b 0303 	adc.w	r3, fp, r3
 8003b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	18db      	adds	r3, r3, r3
 8003b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b42:	4613      	mov	r3, r2
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b52:	f7fc fbb5 	bl	80002c0 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2264      	movs	r2, #100	@ 0x64
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	1acb      	subs	r3, r1, r3
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b72:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003b74:	fba3 2302 	umull	r2, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b80:	441c      	add	r4, r3
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	1851      	adds	r1, r2, r1
 8003ba8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003baa:	4649      	mov	r1, r9
 8003bac:	414b      	adcs	r3, r1
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	00cb      	lsls	r3, r1, #3
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	00ca      	lsls	r2, r1, #3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	18db      	adds	r3, r3, r3
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfe:	4613      	mov	r3, r2
 8003c00:	eb42 0303 	adc.w	r3, r2, r3
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c0e:	f7fc fb57 	bl	80002c0 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	@ 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3332      	adds	r3, #50	@ 0x32
 8003c2a:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4422      	add	r2, r4
 8003c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c40:	e106      	b.n	8003e50 <UART_SetConfig+0x4d8>
 8003c42:	bf00      	nop
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	1891      	adds	r1, r2, r2
 8003c68:	6239      	str	r1, [r7, #32]
 8003c6a:	415b      	adcs	r3, r3
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c72:	4641      	mov	r1, r8
 8003c74:	1854      	adds	r4, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0501 	adc.w	r5, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	00eb      	lsls	r3, r5, #3
 8003c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8a:	00e2      	lsls	r2, r4, #3
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	461d      	mov	r5, r3
 8003c90:	4643      	mov	r3, r8
 8003c92:	18e3      	adds	r3, r4, r3
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c98:	464b      	mov	r3, r9
 8003c9a:	eb45 0303 	adc.w	r3, r5, r3
 8003c9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	008b      	lsls	r3, r1, #2
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc8:	4621      	mov	r1, r4
 8003cca:	008a      	lsls	r2, r1, #2
 8003ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cd0:	f7fc faf6 	bl	80002c0 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4b60      	ldr	r3, [pc, #384]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003cda:	fba3 2302 	umull	r2, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	011c      	lsls	r4, r3, #4
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	61b9      	str	r1, [r7, #24]
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6139      	str	r1, [r7, #16]
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d38:	464b      	mov	r3, r9
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	008b      	lsls	r3, r1, #2
 8003d60:	4641      	mov	r1, r8
 8003d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d66:	4641      	mov	r1, r8
 8003d68:	008a      	lsls	r2, r1, #2
 8003d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d6e:	f7fc faa7 	bl	80002c0 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2264      	movs	r2, #100	@ 0x64
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	1acb      	subs	r3, r1, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	@ 0x32
 8003d8c:	4a33      	ldr	r2, [pc, #204]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d98:	441c      	add	r4, r3
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003da2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003da8:	4642      	mov	r2, r8
 8003daa:	464b      	mov	r3, r9
 8003dac:	1891      	adds	r1, r2, r2
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	415b      	adcs	r3, r3
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db8:	4641      	mov	r1, r8
 8003dba:	1851      	adds	r1, r2, r1
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	414b      	adcs	r3, r1
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd0:	4659      	mov	r1, fp
 8003dd2:	00cb      	lsls	r3, r1, #3
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dda:	4651      	mov	r1, sl
 8003ddc:	00ca      	lsls	r2, r1, #3
 8003dde:	4610      	mov	r0, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	4642      	mov	r2, r8
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dea:	464b      	mov	r3, r9
 8003dec:	460a      	mov	r2, r1
 8003dee:	eb42 0303 	adc.w	r3, r2, r3
 8003df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	008b      	lsls	r3, r1, #2
 8003e10:	4641      	mov	r1, r8
 8003e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e16:	4641      	mov	r1, r8
 8003e18:	008a      	lsls	r2, r1, #2
 8003e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e1e:	f7fc fa4f 	bl	80002c0 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003e28:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	2164      	movs	r1, #100	@ 0x64
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	3332      	adds	r3, #50	@ 0x32
 8003e3a:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4422      	add	r2, r4
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e56:	46bd      	mov	sp, r7
 8003e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5c:	51eb851f 	.word	0x51eb851f

08003e60 <std>:
 8003e60:	2300      	movs	r3, #0
 8003e62:	b510      	push	{r4, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e6e:	6083      	str	r3, [r0, #8]
 8003e70:	8181      	strh	r1, [r0, #12]
 8003e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e74:	81c2      	strh	r2, [r0, #14]
 8003e76:	6183      	str	r3, [r0, #24]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	305c      	adds	r0, #92	@ 0x5c
 8003e7e:	f000 f906 	bl	800408e <memset>
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <std+0x58>)
 8003e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e86:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <std+0x5c>)
 8003e88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <std+0x60>)
 8003e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <std+0x64>)
 8003e90:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <std+0x68>)
 8003e94:	6224      	str	r4, [r4, #32]
 8003e96:	429c      	cmp	r4, r3
 8003e98:	d006      	beq.n	8003ea8 <std+0x48>
 8003e9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e9e:	4294      	cmp	r4, r2
 8003ea0:	d002      	beq.n	8003ea8 <std+0x48>
 8003ea2:	33d0      	adds	r3, #208	@ 0xd0
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	d105      	bne.n	8003eb4 <std+0x54>
 8003ea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f000 b966 	b.w	8004180 <__retarget_lock_init_recursive>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	08004009 	.word	0x08004009
 8003ebc:	0800402b 	.word	0x0800402b
 8003ec0:	08004063 	.word	0x08004063
 8003ec4:	08004087 	.word	0x08004087
 8003ec8:	200004c4 	.word	0x200004c4

08003ecc <stdio_exit_handler>:
 8003ecc:	4a02      	ldr	r2, [pc, #8]	@ (8003ed8 <stdio_exit_handler+0xc>)
 8003ece:	4903      	ldr	r1, [pc, #12]	@ (8003edc <stdio_exit_handler+0x10>)
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <stdio_exit_handler+0x14>)
 8003ed2:	f000 b869 	b.w	8003fa8 <_fwalk_sglue>
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010
 8003edc:	08004a39 	.word	0x08004a39
 8003ee0:	20000020 	.word	0x20000020

08003ee4 <cleanup_stdio>:
 8003ee4:	6841      	ldr	r1, [r0, #4]
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <cleanup_stdio+0x34>)
 8003ee8:	4299      	cmp	r1, r3
 8003eea:	b510      	push	{r4, lr}
 8003eec:	4604      	mov	r4, r0
 8003eee:	d001      	beq.n	8003ef4 <cleanup_stdio+0x10>
 8003ef0:	f000 fda2 	bl	8004a38 <_fflush_r>
 8003ef4:	68a1      	ldr	r1, [r4, #8]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <cleanup_stdio+0x38>)
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	d002      	beq.n	8003f02 <cleanup_stdio+0x1e>
 8003efc:	4620      	mov	r0, r4
 8003efe:	f000 fd9b 	bl	8004a38 <_fflush_r>
 8003f02:	68e1      	ldr	r1, [r4, #12]
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <cleanup_stdio+0x3c>)
 8003f06:	4299      	cmp	r1, r3
 8003f08:	d004      	beq.n	8003f14 <cleanup_stdio+0x30>
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f10:	f000 bd92 	b.w	8004a38 <_fflush_r>
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	bf00      	nop
 8003f18:	200004c4 	.word	0x200004c4
 8003f1c:	2000052c 	.word	0x2000052c
 8003f20:	20000594 	.word	0x20000594

08003f24 <global_stdio_init.part.0>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <global_stdio_init.part.0+0x30>)
 8003f28:	4c0b      	ldr	r4, [pc, #44]	@ (8003f58 <global_stdio_init.part.0+0x34>)
 8003f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f5c <global_stdio_init.part.0+0x38>)
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	4620      	mov	r0, r4
 8003f30:	2200      	movs	r2, #0
 8003f32:	2104      	movs	r1, #4
 8003f34:	f7ff ff94 	bl	8003e60 <std>
 8003f38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2109      	movs	r1, #9
 8003f40:	f7ff ff8e 	bl	8003e60 <std>
 8003f44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f48:	2202      	movs	r2, #2
 8003f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4e:	2112      	movs	r1, #18
 8003f50:	f7ff bf86 	b.w	8003e60 <std>
 8003f54:	200005fc 	.word	0x200005fc
 8003f58:	200004c4 	.word	0x200004c4
 8003f5c:	08003ecd 	.word	0x08003ecd

08003f60 <__sfp_lock_acquire>:
 8003f60:	4801      	ldr	r0, [pc, #4]	@ (8003f68 <__sfp_lock_acquire+0x8>)
 8003f62:	f000 b90e 	b.w	8004182 <__retarget_lock_acquire_recursive>
 8003f66:	bf00      	nop
 8003f68:	20000605 	.word	0x20000605

08003f6c <__sfp_lock_release>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	@ (8003f74 <__sfp_lock_release+0x8>)
 8003f6e:	f000 b909 	b.w	8004184 <__retarget_lock_release_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000605 	.word	0x20000605

08003f78 <__sinit>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	f7ff fff0 	bl	8003f60 <__sfp_lock_acquire>
 8003f80:	6a23      	ldr	r3, [r4, #32]
 8003f82:	b11b      	cbz	r3, 8003f8c <__sinit+0x14>
 8003f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f88:	f7ff bff0 	b.w	8003f6c <__sfp_lock_release>
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <__sinit+0x28>)
 8003f8e:	6223      	str	r3, [r4, #32]
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <__sinit+0x2c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f5      	bne.n	8003f84 <__sinit+0xc>
 8003f98:	f7ff ffc4 	bl	8003f24 <global_stdio_init.part.0>
 8003f9c:	e7f2      	b.n	8003f84 <__sinit+0xc>
 8003f9e:	bf00      	nop
 8003fa0:	08003ee5 	.word	0x08003ee5
 8003fa4:	200005fc 	.word	0x200005fc

08003fa8 <_fwalk_sglue>:
 8003fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fac:	4607      	mov	r7, r0
 8003fae:	4688      	mov	r8, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8003fbc:	d505      	bpl.n	8003fca <_fwalk_sglue+0x22>
 8003fbe:	6824      	ldr	r4, [r4, #0]
 8003fc0:	2c00      	cmp	r4, #0
 8003fc2:	d1f7      	bne.n	8003fb4 <_fwalk_sglue+0xc>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fca:	89ab      	ldrh	r3, [r5, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d907      	bls.n	8003fe0 <_fwalk_sglue+0x38>
 8003fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	d003      	beq.n	8003fe0 <_fwalk_sglue+0x38>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c0      	blx	r8
 8003fde:	4306      	orrs	r6, r0
 8003fe0:	3568      	adds	r5, #104	@ 0x68
 8003fe2:	e7e9      	b.n	8003fb8 <_fwalk_sglue+0x10>

08003fe4 <iprintf>:
 8003fe4:	b40f      	push	{r0, r1, r2, r3}
 8003fe6:	b507      	push	{r0, r1, r2, lr}
 8003fe8:	4906      	ldr	r1, [pc, #24]	@ (8004004 <iprintf+0x20>)
 8003fea:	ab04      	add	r3, sp, #16
 8003fec:	6808      	ldr	r0, [r1, #0]
 8003fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff2:	6881      	ldr	r1, [r0, #8]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	f000 f9f7 	bl	80043e8 <_vfiprintf_r>
 8003ffa:	b003      	add	sp, #12
 8003ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004000:	b004      	add	sp, #16
 8004002:	4770      	bx	lr
 8004004:	2000001c 	.word	0x2000001c

08004008 <__sread>:
 8004008:	b510      	push	{r4, lr}
 800400a:	460c      	mov	r4, r1
 800400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004010:	f000 f868 	bl	80040e4 <_read_r>
 8004014:	2800      	cmp	r0, #0
 8004016:	bfab      	itete	ge
 8004018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800401a:	89a3      	ldrhlt	r3, [r4, #12]
 800401c:	181b      	addge	r3, r3, r0
 800401e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004022:	bfac      	ite	ge
 8004024:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004026:	81a3      	strhlt	r3, [r4, #12]
 8004028:	bd10      	pop	{r4, pc}

0800402a <__swrite>:
 800402a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402e:	461f      	mov	r7, r3
 8004030:	898b      	ldrh	r3, [r1, #12]
 8004032:	05db      	lsls	r3, r3, #23
 8004034:	4605      	mov	r5, r0
 8004036:	460c      	mov	r4, r1
 8004038:	4616      	mov	r6, r2
 800403a:	d505      	bpl.n	8004048 <__swrite+0x1e>
 800403c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004040:	2302      	movs	r3, #2
 8004042:	2200      	movs	r2, #0
 8004044:	f000 f83c 	bl	80040c0 <_lseek_r>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800404e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	4632      	mov	r2, r6
 8004056:	463b      	mov	r3, r7
 8004058:	4628      	mov	r0, r5
 800405a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800405e:	f000 b853 	b.w	8004108 <_write_r>

08004062 <__sseek>:
 8004062:	b510      	push	{r4, lr}
 8004064:	460c      	mov	r4, r1
 8004066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406a:	f000 f829 	bl	80040c0 <_lseek_r>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	bf15      	itete	ne
 8004074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800407a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800407e:	81a3      	strheq	r3, [r4, #12]
 8004080:	bf18      	it	ne
 8004082:	81a3      	strhne	r3, [r4, #12]
 8004084:	bd10      	pop	{r4, pc}

08004086 <__sclose>:
 8004086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408a:	f000 b809 	b.w	80040a0 <_close_r>

0800408e <memset>:
 800408e:	4402      	add	r2, r0
 8004090:	4603      	mov	r3, r0
 8004092:	4293      	cmp	r3, r2
 8004094:	d100      	bne.n	8004098 <memset+0xa>
 8004096:	4770      	bx	lr
 8004098:	f803 1b01 	strb.w	r1, [r3], #1
 800409c:	e7f9      	b.n	8004092 <memset+0x4>
	...

080040a0 <_close_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4d06      	ldr	r5, [pc, #24]	@ (80040bc <_close_r+0x1c>)
 80040a4:	2300      	movs	r3, #0
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	f7fd f93d 	bl	800132a <_close>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_close_r+0x1a>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_close_r+0x1a>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	20000600 	.word	0x20000600

080040c0 <_lseek_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d07      	ldr	r5, [pc, #28]	@ (80040e0 <_lseek_r+0x20>)
 80040c4:	4604      	mov	r4, r0
 80040c6:	4608      	mov	r0, r1
 80040c8:	4611      	mov	r1, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	602a      	str	r2, [r5, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7fd f952 	bl	8001378 <_lseek>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_lseek_r+0x1e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_lseek_r+0x1e>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000600 	.word	0x20000600

080040e4 <_read_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4d07      	ldr	r5, [pc, #28]	@ (8004104 <_read_r+0x20>)
 80040e8:	4604      	mov	r4, r0
 80040ea:	4608      	mov	r0, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	2200      	movs	r2, #0
 80040f0:	602a      	str	r2, [r5, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7fd f8fc 	bl	80012f0 <_read>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_read_r+0x1e>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_read_r+0x1e>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	20000600 	.word	0x20000600

08004108 <_write_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d07      	ldr	r5, [pc, #28]	@ (8004128 <_write_r+0x20>)
 800410c:	4604      	mov	r4, r0
 800410e:	4608      	mov	r0, r1
 8004110:	4611      	mov	r1, r2
 8004112:	2200      	movs	r2, #0
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f7fc ff66 	bl	8000fe8 <_write>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_write_r+0x1e>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_write_r+0x1e>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20000600 	.word	0x20000600

0800412c <__errno>:
 800412c:	4b01      	ldr	r3, [pc, #4]	@ (8004134 <__errno+0x8>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000001c 	.word	0x2000001c

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	@ (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	@ (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	@ (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	@ (800417c <__libc_init_array+0x44>)
 800414c:	f000 fdc4 	bl	8004cd8 <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	08004d64 	.word	0x08004d64
 8004174:	08004d64 	.word	0x08004d64
 8004178:	08004d64 	.word	0x08004d64
 800417c:	08004d68 	.word	0x08004d68

08004180 <__retarget_lock_init_recursive>:
 8004180:	4770      	bx	lr

08004182 <__retarget_lock_acquire_recursive>:
 8004182:	4770      	bx	lr

08004184 <__retarget_lock_release_recursive>:
 8004184:	4770      	bx	lr

08004186 <memcpy>:
 8004186:	440a      	add	r2, r1
 8004188:	4291      	cmp	r1, r2
 800418a:	f100 33ff 	add.w	r3, r0, #4294967295
 800418e:	d100      	bne.n	8004192 <memcpy+0xc>
 8004190:	4770      	bx	lr
 8004192:	b510      	push	{r4, lr}
 8004194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800419c:	4291      	cmp	r1, r2
 800419e:	d1f9      	bne.n	8004194 <memcpy+0xe>
 80041a0:	bd10      	pop	{r4, pc}
	...

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d041      	beq.n	8004230 <_free_r+0x8c>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8e0 	bl	800437c <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x2c>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	f000 b8dc 	b.w	8004388 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	1821      	adds	r1, r4, r0
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1809      	addeq	r1, r1, r0
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x1e>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x4c>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x42>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x6c>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	4401      	add	r1, r0
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	4283      	cmp	r3, r0
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x22>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	4408      	add	r0, r1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x22>
 8004210:	d902      	bls.n	8004218 <_free_r+0x74>
 8004212:	230c      	movs	r3, #12
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x22>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x22>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	2000060c 	.word	0x2000060c

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0f      	ldr	r6, [pc, #60]	@ (8004278 <sbrk_aligned+0x40>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 fcb4 	bl	8004bb0 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 fcaf 	bl	8004bb0 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d103      	bne.n	800425e <sbrk_aligned+0x26>
 8004256:	f04f 34ff 	mov.w	r4, #4294967295
 800425a:	4620      	mov	r0, r4
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d0f8      	beq.n	800425a <sbrk_aligned+0x22>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fca0 	bl	8004bb0 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d1f2      	bne.n	800425a <sbrk_aligned+0x22>
 8004274:	e7ef      	b.n	8004256 <sbrk_aligned+0x1e>
 8004276:	bf00      	nop
 8004278:	20000608 	.word	0x20000608

0800427c <_malloc_r>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4606      	mov	r6, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d904      	bls.n	80042a2 <_malloc_r+0x26>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004378 <_malloc_r+0xfc>
 80042a6:	f000 f869 	bl	800437c <__malloc_lock>
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	461c      	mov	r4, r3
 80042b0:	bb44      	cbnz	r4, 8004304 <_malloc_r+0x88>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffbf 	bl	8004238 <sbrk_aligned>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	4604      	mov	r4, r0
 80042be:	d158      	bne.n	8004372 <_malloc_r+0xf6>
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	4627      	mov	r7, r4
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d143      	bne.n	8004352 <_malloc_r+0xd6>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d04b      	beq.n	8004366 <_malloc_r+0xea>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	eb04 0903 	add.w	r9, r4, r3
 80042d8:	f000 fc6a 	bl	8004bb0 <_sbrk_r>
 80042dc:	4581      	cmp	r9, r0
 80042de:	d142      	bne.n	8004366 <_malloc_r+0xea>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	1a6d      	subs	r5, r5, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffa6 	bl	8004238 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d03a      	beq.n	8004366 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	442b      	add	r3, r5
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	bb62      	cbnz	r2, 8004358 <_malloc_r+0xdc>
 80042fe:	f8c8 7000 	str.w	r7, [r8]
 8004302:	e00f      	b.n	8004324 <_malloc_r+0xa8>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	1b52      	subs	r2, r2, r5
 8004308:	d420      	bmi.n	800434c <_malloc_r+0xd0>
 800430a:	2a0b      	cmp	r2, #11
 800430c:	d917      	bls.n	800433e <_malloc_r+0xc2>
 800430e:	1961      	adds	r1, r4, r5
 8004310:	42a3      	cmp	r3, r4
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	6059      	strne	r1, [r3, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	bf08      	it	eq
 800431c:	f8c8 1000 	streq.w	r1, [r8]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f82f 	bl	8004388 <__malloc_unlock>
 800432a:	f104 000b 	add.w	r0, r4, #11
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	f020 0007 	bic.w	r0, r0, #7
 8004334:	1ac2      	subs	r2, r0, r3
 8004336:	bf1c      	itt	ne
 8004338:	1a1b      	subne	r3, r3, r0
 800433a:	50a3      	strne	r3, [r4, r2]
 800433c:	e7af      	b.n	800429e <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	f8c8 2000 	streq.w	r2, [r8]
 8004348:	605a      	strne	r2, [r3, #4]
 800434a:	e7eb      	b.n	8004324 <_malloc_r+0xa8>
 800434c:	4623      	mov	r3, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7ae      	b.n	80042b0 <_malloc_r+0x34>
 8004352:	463c      	mov	r4, r7
 8004354:	687f      	ldr	r7, [r7, #4]
 8004356:	e7b6      	b.n	80042c6 <_malloc_r+0x4a>
 8004358:	461a      	mov	r2, r3
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	42a3      	cmp	r3, r4
 800435e:	d1fb      	bne.n	8004358 <_malloc_r+0xdc>
 8004360:	2300      	movs	r3, #0
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa8>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f80c 	bl	8004388 <__malloc_unlock>
 8004370:	e794      	b.n	800429c <_malloc_r+0x20>
 8004372:	6005      	str	r5, [r0, #0]
 8004374:	e7d6      	b.n	8004324 <_malloc_r+0xa8>
 8004376:	bf00      	nop
 8004378:	2000060c 	.word	0x2000060c

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff bf00 	b.w	8004182 <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	20000604 	.word	0x20000604

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	@ (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff befb 	b.w	8004184 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	20000604 	.word	0x20000604

08004394 <__sfputc_r>:
 8004394:	6893      	ldr	r3, [r2, #8]
 8004396:	3b01      	subs	r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	b410      	push	{r4}
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	da08      	bge.n	80043b2 <__sfputc_r+0x1e>
 80043a0:	6994      	ldr	r4, [r2, #24]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	db01      	blt.n	80043aa <__sfputc_r+0x16>
 80043a6:	290a      	cmp	r1, #10
 80043a8:	d103      	bne.n	80043b2 <__sfputc_r+0x1e>
 80043aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ae:	f000 bb6b 	b.w	8004a88 <__swbuf_r>
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	1c58      	adds	r0, r3, #1
 80043b6:	6010      	str	r0, [r2, #0]
 80043b8:	7019      	strb	r1, [r3, #0]
 80043ba:	4608      	mov	r0, r1
 80043bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <__sfputs_r>:
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c4:	4606      	mov	r6, r0
 80043c6:	460f      	mov	r7, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	18d5      	adds	r5, r2, r3
 80043cc:	42ac      	cmp	r4, r5
 80043ce:	d101      	bne.n	80043d4 <__sfputs_r+0x12>
 80043d0:	2000      	movs	r0, #0
 80043d2:	e007      	b.n	80043e4 <__sfputs_r+0x22>
 80043d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d8:	463a      	mov	r2, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff ffda 	bl	8004394 <__sfputc_r>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d1f3      	bne.n	80043cc <__sfputs_r+0xa>
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043e8 <_vfiprintf_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	460d      	mov	r5, r1
 80043ee:	b09d      	sub	sp, #116	@ 0x74
 80043f0:	4614      	mov	r4, r2
 80043f2:	4698      	mov	r8, r3
 80043f4:	4606      	mov	r6, r0
 80043f6:	b118      	cbz	r0, 8004400 <_vfiprintf_r+0x18>
 80043f8:	6a03      	ldr	r3, [r0, #32]
 80043fa:	b90b      	cbnz	r3, 8004400 <_vfiprintf_r+0x18>
 80043fc:	f7ff fdbc 	bl	8003f78 <__sinit>
 8004400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004402:	07d9      	lsls	r1, r3, #31
 8004404:	d405      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	059a      	lsls	r2, r3, #22
 800440a:	d402      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 800440c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440e:	f7ff feb8 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004412:	89ab      	ldrh	r3, [r5, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	d501      	bpl.n	800441c <_vfiprintf_r+0x34>
 8004418:	692b      	ldr	r3, [r5, #16]
 800441a:	b99b      	cbnz	r3, 8004444 <_vfiprintf_r+0x5c>
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fb70 	bl	8004b04 <__swsetup_r>
 8004424:	b170      	cbz	r0, 8004444 <_vfiprintf_r+0x5c>
 8004426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004428:	07dc      	lsls	r4, r3, #31
 800442a:	d504      	bpl.n	8004436 <_vfiprintf_r+0x4e>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b01d      	add	sp, #116	@ 0x74
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	0598      	lsls	r0, r3, #22
 800443a:	d4f7      	bmi.n	800442c <_vfiprintf_r+0x44>
 800443c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800443e:	f7ff fea1 	bl	8004184 <__retarget_lock_release_recursive>
 8004442:	e7f3      	b.n	800442c <_vfiprintf_r+0x44>
 8004444:	2300      	movs	r3, #0
 8004446:	9309      	str	r3, [sp, #36]	@ 0x24
 8004448:	2320      	movs	r3, #32
 800444a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800444e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004452:	2330      	movs	r3, #48	@ 0x30
 8004454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004604 <_vfiprintf_r+0x21c>
 8004458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800445c:	f04f 0901 	mov.w	r9, #1
 8004460:	4623      	mov	r3, r4
 8004462:	469a      	mov	sl, r3
 8004464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004468:	b10a      	cbz	r2, 800446e <_vfiprintf_r+0x86>
 800446a:	2a25      	cmp	r2, #37	@ 0x25
 800446c:	d1f9      	bne.n	8004462 <_vfiprintf_r+0x7a>
 800446e:	ebba 0b04 	subs.w	fp, sl, r4
 8004472:	d00b      	beq.n	800448c <_vfiprintf_r+0xa4>
 8004474:	465b      	mov	r3, fp
 8004476:	4622      	mov	r2, r4
 8004478:	4629      	mov	r1, r5
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffa1 	bl	80043c2 <__sfputs_r>
 8004480:	3001      	adds	r0, #1
 8004482:	f000 80a7 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004488:	445a      	add	r2, fp
 800448a:	9209      	str	r2, [sp, #36]	@ 0x24
 800448c:	f89a 3000 	ldrb.w	r3, [sl]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 809f 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004496:	2300      	movs	r3, #0
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a0:	f10a 0a01 	add.w	sl, sl, #1
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ae:	4654      	mov	r4, sl
 80044b0:	2205      	movs	r2, #5
 80044b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b6:	4853      	ldr	r0, [pc, #332]	@ (8004604 <_vfiprintf_r+0x21c>)
 80044b8:	f7fb feb2 	bl	8000220 <memchr>
 80044bc:	9a04      	ldr	r2, [sp, #16]
 80044be:	b9d8      	cbnz	r0, 80044f8 <_vfiprintf_r+0x110>
 80044c0:	06d1      	lsls	r1, r2, #27
 80044c2:	bf44      	itt	mi
 80044c4:	2320      	movmi	r3, #32
 80044c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ca:	0713      	lsls	r3, r2, #28
 80044cc:	bf44      	itt	mi
 80044ce:	232b      	movmi	r3, #43	@ 0x2b
 80044d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044da:	d015      	beq.n	8004508 <_vfiprintf_r+0x120>
 80044dc:	9a07      	ldr	r2, [sp, #28]
 80044de:	4654      	mov	r4, sl
 80044e0:	2000      	movs	r0, #0
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ec:	3b30      	subs	r3, #48	@ 0x30
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d94b      	bls.n	800458a <_vfiprintf_r+0x1a2>
 80044f2:	b1b0      	cbz	r0, 8004522 <_vfiprintf_r+0x13a>
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	e014      	b.n	8004522 <_vfiprintf_r+0x13a>
 80044f8:	eba0 0308 	sub.w	r3, r0, r8
 80044fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	46a2      	mov	sl, r4
 8004506:	e7d2      	b.n	80044ae <_vfiprintf_r+0xc6>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d19      	adds	r1, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9103      	str	r1, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfbb      	ittet	lt
 8004514:	425b      	neglt	r3, r3
 8004516:	f042 0202 	orrlt.w	r2, r2, #2
 800451a:	9307      	strge	r3, [sp, #28]
 800451c:	9307      	strlt	r3, [sp, #28]
 800451e:	bfb8      	it	lt
 8004520:	9204      	strlt	r2, [sp, #16]
 8004522:	7823      	ldrb	r3, [r4, #0]
 8004524:	2b2e      	cmp	r3, #46	@ 0x2e
 8004526:	d10a      	bne.n	800453e <_vfiprintf_r+0x156>
 8004528:	7863      	ldrb	r3, [r4, #1]
 800452a:	2b2a      	cmp	r3, #42	@ 0x2a
 800452c:	d132      	bne.n	8004594 <_vfiprintf_r+0x1ac>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9203      	str	r2, [sp, #12]
 8004536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800453a:	3402      	adds	r4, #2
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004614 <_vfiprintf_r+0x22c>
 8004542:	7821      	ldrb	r1, [r4, #0]
 8004544:	2203      	movs	r2, #3
 8004546:	4650      	mov	r0, sl
 8004548:	f7fb fe6a 	bl	8000220 <memchr>
 800454c:	b138      	cbz	r0, 800455e <_vfiprintf_r+0x176>
 800454e:	9b04      	ldr	r3, [sp, #16]
 8004550:	eba0 000a 	sub.w	r0, r0, sl
 8004554:	2240      	movs	r2, #64	@ 0x40
 8004556:	4082      	lsls	r2, r0
 8004558:	4313      	orrs	r3, r2
 800455a:	3401      	adds	r4, #1
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004562:	4829      	ldr	r0, [pc, #164]	@ (8004608 <_vfiprintf_r+0x220>)
 8004564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004568:	2206      	movs	r2, #6
 800456a:	f7fb fe59 	bl	8000220 <memchr>
 800456e:	2800      	cmp	r0, #0
 8004570:	d03f      	beq.n	80045f2 <_vfiprintf_r+0x20a>
 8004572:	4b26      	ldr	r3, [pc, #152]	@ (800460c <_vfiprintf_r+0x224>)
 8004574:	bb1b      	cbnz	r3, 80045be <_vfiprintf_r+0x1d6>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	3307      	adds	r3, #7
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	3308      	adds	r3, #8
 8004580:	9303      	str	r3, [sp, #12]
 8004582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004584:	443b      	add	r3, r7
 8004586:	9309      	str	r3, [sp, #36]	@ 0x24
 8004588:	e76a      	b.n	8004460 <_vfiprintf_r+0x78>
 800458a:	fb0c 3202 	mla	r2, ip, r2, r3
 800458e:	460c      	mov	r4, r1
 8004590:	2001      	movs	r0, #1
 8004592:	e7a8      	b.n	80044e6 <_vfiprintf_r+0xfe>
 8004594:	2300      	movs	r3, #0
 8004596:	3401      	adds	r4, #1
 8004598:	9305      	str	r3, [sp, #20]
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0c0a 	mov.w	ip, #10
 80045a0:	4620      	mov	r0, r4
 80045a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a6:	3a30      	subs	r2, #48	@ 0x30
 80045a8:	2a09      	cmp	r2, #9
 80045aa:	d903      	bls.n	80045b4 <_vfiprintf_r+0x1cc>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0c6      	beq.n	800453e <_vfiprintf_r+0x156>
 80045b0:	9105      	str	r1, [sp, #20]
 80045b2:	e7c4      	b.n	800453e <_vfiprintf_r+0x156>
 80045b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b8:	4604      	mov	r4, r0
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7f0      	b.n	80045a0 <_vfiprintf_r+0x1b8>
 80045be:	ab03      	add	r3, sp, #12
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	462a      	mov	r2, r5
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <_vfiprintf_r+0x228>)
 80045c6:	a904      	add	r1, sp, #16
 80045c8:	4630      	mov	r0, r6
 80045ca:	f3af 8000 	nop.w
 80045ce:	4607      	mov	r7, r0
 80045d0:	1c78      	adds	r0, r7, #1
 80045d2:	d1d6      	bne.n	8004582 <_vfiprintf_r+0x19a>
 80045d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045d6:	07d9      	lsls	r1, r3, #31
 80045d8:	d405      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	059a      	lsls	r2, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045e2:	f7ff fdcf 	bl	8004184 <__retarget_lock_release_recursive>
 80045e6:	89ab      	ldrh	r3, [r5, #12]
 80045e8:	065b      	lsls	r3, r3, #25
 80045ea:	f53f af1f 	bmi.w	800442c <_vfiprintf_r+0x44>
 80045ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f0:	e71e      	b.n	8004430 <_vfiprintf_r+0x48>
 80045f2:	ab03      	add	r3, sp, #12
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <_vfiprintf_r+0x228>)
 80045fa:	a904      	add	r1, sp, #16
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f879 	bl	80046f4 <_printf_i>
 8004602:	e7e4      	b.n	80045ce <_vfiprintf_r+0x1e6>
 8004604:	08004d28 	.word	0x08004d28
 8004608:	08004d32 	.word	0x08004d32
 800460c:	00000000 	.word	0x00000000
 8004610:	080043c3 	.word	0x080043c3
 8004614:	08004d2e 	.word	0x08004d2e

08004618 <_printf_common>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	4616      	mov	r6, r2
 800461e:	4698      	mov	r8, r3
 8004620:	688a      	ldr	r2, [r1, #8]
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004628:	4293      	cmp	r3, r2
 800462a:	bfb8      	it	lt
 800462c:	4613      	movlt	r3, r2
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004634:	4607      	mov	r7, r0
 8004636:	460c      	mov	r4, r1
 8004638:	b10a      	cbz	r2, 800463e <_printf_common+0x26>
 800463a:	3301      	adds	r3, #1
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	0699      	lsls	r1, r3, #26
 8004642:	bf42      	ittt	mi
 8004644:	6833      	ldrmi	r3, [r6, #0]
 8004646:	3302      	addmi	r3, #2
 8004648:	6033      	strmi	r3, [r6, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d106      	bne.n	8004660 <_printf_common+0x48>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	6832      	ldr	r2, [r6, #0]
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	42ab      	cmp	r3, r5
 800465e:	dc26      	bgt.n	80046ae <_printf_common+0x96>
 8004660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	3b00      	subs	r3, #0
 8004668:	bf18      	it	ne
 800466a:	2301      	movne	r3, #1
 800466c:	0692      	lsls	r2, r2, #26
 800466e:	d42b      	bmi.n	80046c8 <_printf_common+0xb0>
 8004670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004674:	4641      	mov	r1, r8
 8004676:	4638      	mov	r0, r7
 8004678:	47c8      	blx	r9
 800467a:	3001      	adds	r0, #1
 800467c:	d01e      	beq.n	80046bc <_printf_common+0xa4>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6922      	ldr	r2, [r4, #16]
 8004682:	f003 0306 	and.w	r3, r3, #6
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf02      	ittt	eq
 800468a:	68e5      	ldreq	r5, [r4, #12]
 800468c:	6833      	ldreq	r3, [r6, #0]
 800468e:	1aed      	subeq	r5, r5, r3
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	bf0c      	ite	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	2500      	movne	r5, #0
 800469a:	4293      	cmp	r3, r2
 800469c:	bfc4      	itt	gt
 800469e:	1a9b      	subgt	r3, r3, r2
 80046a0:	18ed      	addgt	r5, r5, r3
 80046a2:	2600      	movs	r6, #0
 80046a4:	341a      	adds	r4, #26
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d11a      	bne.n	80046e0 <_printf_common+0xc8>
 80046aa:	2000      	movs	r0, #0
 80046ac:	e008      	b.n	80046c0 <_printf_common+0xa8>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4641      	mov	r1, r8
 80046b4:	4638      	mov	r0, r7
 80046b6:	47c8      	blx	r9
 80046b8:	3001      	adds	r0, #1
 80046ba:	d103      	bne.n	80046c4 <_printf_common+0xac>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7c6      	b.n	8004656 <_printf_common+0x3e>
 80046c8:	18e1      	adds	r1, r4, r3
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	2030      	movs	r0, #48	@ 0x30
 80046ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046d2:	4422      	add	r2, r4
 80046d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046dc:	3302      	adds	r3, #2
 80046de:	e7c7      	b.n	8004670 <_printf_common+0x58>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4622      	mov	r2, r4
 80046e4:	4641      	mov	r1, r8
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c8      	blx	r9
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0e6      	beq.n	80046bc <_printf_common+0xa4>
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7d9      	b.n	80046a6 <_printf_common+0x8e>
	...

080046f4 <_printf_i>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	7e0f      	ldrb	r7, [r1, #24]
 80046fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046fc:	2f78      	cmp	r7, #120	@ 0x78
 80046fe:	4691      	mov	r9, r2
 8004700:	4680      	mov	r8, r0
 8004702:	460c      	mov	r4, r1
 8004704:	469a      	mov	sl, r3
 8004706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800470a:	d807      	bhi.n	800471c <_printf_i+0x28>
 800470c:	2f62      	cmp	r7, #98	@ 0x62
 800470e:	d80a      	bhi.n	8004726 <_printf_i+0x32>
 8004710:	2f00      	cmp	r7, #0
 8004712:	f000 80d1 	beq.w	80048b8 <_printf_i+0x1c4>
 8004716:	2f58      	cmp	r7, #88	@ 0x58
 8004718:	f000 80b8 	beq.w	800488c <_printf_i+0x198>
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004724:	e03a      	b.n	800479c <_printf_i+0xa8>
 8004726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800472a:	2b15      	cmp	r3, #21
 800472c:	d8f6      	bhi.n	800471c <_printf_i+0x28>
 800472e:	a101      	add	r1, pc, #4	@ (adr r1, 8004734 <_printf_i+0x40>)
 8004730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004734:	0800478d 	.word	0x0800478d
 8004738:	080047a1 	.word	0x080047a1
 800473c:	0800471d 	.word	0x0800471d
 8004740:	0800471d 	.word	0x0800471d
 8004744:	0800471d 	.word	0x0800471d
 8004748:	0800471d 	.word	0x0800471d
 800474c:	080047a1 	.word	0x080047a1
 8004750:	0800471d 	.word	0x0800471d
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	0800489f 	.word	0x0800489f
 8004764:	080047cb 	.word	0x080047cb
 8004768:	08004859 	.word	0x08004859
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800471d 	.word	0x0800471d
 8004774:	080048c1 	.word	0x080048c1
 8004778:	0800471d 	.word	0x0800471d
 800477c:	080047cb 	.word	0x080047cb
 8004780:	0800471d 	.word	0x0800471d
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004861 	.word	0x08004861
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6032      	str	r2, [r6, #0]
 8004794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e09c      	b.n	80048da <_printf_i+0x1e6>
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	6031      	str	r1, [r6, #0]
 80047a8:	0606      	lsls	r6, r0, #24
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0xbc>
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	e003      	b.n	80047b8 <_printf_i+0xc4>
 80047b0:	0645      	lsls	r5, r0, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0xb8>
 80047b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0xd0>
 80047bc:	232d      	movs	r3, #45	@ 0x2d
 80047be:	426d      	negs	r5, r5
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c4:	4858      	ldr	r0, [pc, #352]	@ (8004928 <_printf_i+0x234>)
 80047c6:	230a      	movs	r3, #10
 80047c8:	e011      	b.n	80047ee <_printf_i+0xfa>
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	6833      	ldr	r3, [r6, #0]
 80047ce:	0608      	lsls	r0, r1, #24
 80047d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0xe8>
 80047d6:	0649      	lsls	r1, r1, #25
 80047d8:	bf48      	it	mi
 80047da:	b2ad      	uxthmi	r5, r5
 80047dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047de:	4852      	ldr	r0, [pc, #328]	@ (8004928 <_printf_i+0x234>)
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	bf14      	ite	ne
 80047e4:	230a      	movne	r3, #10
 80047e6:	2308      	moveq	r3, #8
 80047e8:	2100      	movs	r1, #0
 80047ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ee:	6866      	ldr	r6, [r4, #4]
 80047f0:	60a6      	str	r6, [r4, #8]
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	db05      	blt.n	8004802 <_printf_i+0x10e>
 80047f6:	6821      	ldr	r1, [r4, #0]
 80047f8:	432e      	orrs	r6, r5
 80047fa:	f021 0104 	bic.w	r1, r1, #4
 80047fe:	6021      	str	r1, [r4, #0]
 8004800:	d04b      	beq.n	800489a <_printf_i+0x1a6>
 8004802:	4616      	mov	r6, r2
 8004804:	fbb5 f1f3 	udiv	r1, r5, r3
 8004808:	fb03 5711 	mls	r7, r3, r1, r5
 800480c:	5dc7      	ldrb	r7, [r0, r7]
 800480e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004812:	462f      	mov	r7, r5
 8004814:	42bb      	cmp	r3, r7
 8004816:	460d      	mov	r5, r1
 8004818:	d9f4      	bls.n	8004804 <_printf_i+0x110>
 800481a:	2b08      	cmp	r3, #8
 800481c:	d10b      	bne.n	8004836 <_printf_i+0x142>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	07df      	lsls	r7, r3, #31
 8004822:	d508      	bpl.n	8004836 <_printf_i+0x142>
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	6861      	ldr	r1, [r4, #4]
 8004828:	4299      	cmp	r1, r3
 800482a:	bfde      	ittt	le
 800482c:	2330      	movle	r3, #48	@ 0x30
 800482e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004832:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004836:	1b92      	subs	r2, r2, r6
 8004838:	6122      	str	r2, [r4, #16]
 800483a:	f8cd a000 	str.w	sl, [sp]
 800483e:	464b      	mov	r3, r9
 8004840:	aa03      	add	r2, sp, #12
 8004842:	4621      	mov	r1, r4
 8004844:	4640      	mov	r0, r8
 8004846:	f7ff fee7 	bl	8004618 <_printf_common>
 800484a:	3001      	adds	r0, #1
 800484c:	d14a      	bne.n	80048e4 <_printf_i+0x1f0>
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	b004      	add	sp, #16
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	f043 0320 	orr.w	r3, r3, #32
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	4832      	ldr	r0, [pc, #200]	@ (800492c <_printf_i+0x238>)
 8004862:	2778      	movs	r7, #120	@ 0x78
 8004864:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	6831      	ldr	r1, [r6, #0]
 800486c:	061f      	lsls	r7, r3, #24
 800486e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004872:	d402      	bmi.n	800487a <_printf_i+0x186>
 8004874:	065f      	lsls	r7, r3, #25
 8004876:	bf48      	it	mi
 8004878:	b2ad      	uxthmi	r5, r5
 800487a:	6031      	str	r1, [r6, #0]
 800487c:	07d9      	lsls	r1, r3, #31
 800487e:	bf44      	itt	mi
 8004880:	f043 0320 	orrmi.w	r3, r3, #32
 8004884:	6023      	strmi	r3, [r4, #0]
 8004886:	b11d      	cbz	r5, 8004890 <_printf_i+0x19c>
 8004888:	2310      	movs	r3, #16
 800488a:	e7ad      	b.n	80047e8 <_printf_i+0xf4>
 800488c:	4826      	ldr	r0, [pc, #152]	@ (8004928 <_printf_i+0x234>)
 800488e:	e7e9      	b.n	8004864 <_printf_i+0x170>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	f023 0320 	bic.w	r3, r3, #32
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	e7f6      	b.n	8004888 <_printf_i+0x194>
 800489a:	4616      	mov	r6, r2
 800489c:	e7bd      	b.n	800481a <_printf_i+0x126>
 800489e:	6833      	ldr	r3, [r6, #0]
 80048a0:	6825      	ldr	r5, [r4, #0]
 80048a2:	6961      	ldr	r1, [r4, #20]
 80048a4:	1d18      	adds	r0, r3, #4
 80048a6:	6030      	str	r0, [r6, #0]
 80048a8:	062e      	lsls	r6, r5, #24
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	d501      	bpl.n	80048b2 <_printf_i+0x1be>
 80048ae:	6019      	str	r1, [r3, #0]
 80048b0:	e002      	b.n	80048b8 <_printf_i+0x1c4>
 80048b2:	0668      	lsls	r0, r5, #25
 80048b4:	d5fb      	bpl.n	80048ae <_printf_i+0x1ba>
 80048b6:	8019      	strh	r1, [r3, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	6123      	str	r3, [r4, #16]
 80048bc:	4616      	mov	r6, r2
 80048be:	e7bc      	b.n	800483a <_printf_i+0x146>
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	6032      	str	r2, [r6, #0]
 80048c6:	681e      	ldr	r6, [r3, #0]
 80048c8:	6862      	ldr	r2, [r4, #4]
 80048ca:	2100      	movs	r1, #0
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7fb fca7 	bl	8000220 <memchr>
 80048d2:	b108      	cbz	r0, 80048d8 <_printf_i+0x1e4>
 80048d4:	1b80      	subs	r0, r0, r6
 80048d6:	6060      	str	r0, [r4, #4]
 80048d8:	6863      	ldr	r3, [r4, #4]
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	2300      	movs	r3, #0
 80048de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e2:	e7aa      	b.n	800483a <_printf_i+0x146>
 80048e4:	6923      	ldr	r3, [r4, #16]
 80048e6:	4632      	mov	r2, r6
 80048e8:	4649      	mov	r1, r9
 80048ea:	4640      	mov	r0, r8
 80048ec:	47d0      	blx	sl
 80048ee:	3001      	adds	r0, #1
 80048f0:	d0ad      	beq.n	800484e <_printf_i+0x15a>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	079b      	lsls	r3, r3, #30
 80048f6:	d413      	bmi.n	8004920 <_printf_i+0x22c>
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	4298      	cmp	r0, r3
 80048fe:	bfb8      	it	lt
 8004900:	4618      	movlt	r0, r3
 8004902:	e7a6      	b.n	8004852 <_printf_i+0x15e>
 8004904:	2301      	movs	r3, #1
 8004906:	4632      	mov	r2, r6
 8004908:	4649      	mov	r1, r9
 800490a:	4640      	mov	r0, r8
 800490c:	47d0      	blx	sl
 800490e:	3001      	adds	r0, #1
 8004910:	d09d      	beq.n	800484e <_printf_i+0x15a>
 8004912:	3501      	adds	r5, #1
 8004914:	68e3      	ldr	r3, [r4, #12]
 8004916:	9903      	ldr	r1, [sp, #12]
 8004918:	1a5b      	subs	r3, r3, r1
 800491a:	42ab      	cmp	r3, r5
 800491c:	dcf2      	bgt.n	8004904 <_printf_i+0x210>
 800491e:	e7eb      	b.n	80048f8 <_printf_i+0x204>
 8004920:	2500      	movs	r5, #0
 8004922:	f104 0619 	add.w	r6, r4, #25
 8004926:	e7f5      	b.n	8004914 <_printf_i+0x220>
 8004928:	08004d39 	.word	0x08004d39
 800492c:	08004d4a 	.word	0x08004d4a

08004930 <__sflush_r>:
 8004930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	0716      	lsls	r6, r2, #28
 800493a:	4605      	mov	r5, r0
 800493c:	460c      	mov	r4, r1
 800493e:	d454      	bmi.n	80049ea <__sflush_r+0xba>
 8004940:	684b      	ldr	r3, [r1, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc02      	bgt.n	800494c <__sflush_r+0x1c>
 8004946:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	dd48      	ble.n	80049de <__sflush_r+0xae>
 800494c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800494e:	2e00      	cmp	r6, #0
 8004950:	d045      	beq.n	80049de <__sflush_r+0xae>
 8004952:	2300      	movs	r3, #0
 8004954:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004958:	682f      	ldr	r7, [r5, #0]
 800495a:	6a21      	ldr	r1, [r4, #32]
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	d030      	beq.n	80049c2 <__sflush_r+0x92>
 8004960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	0759      	lsls	r1, r3, #29
 8004966:	d505      	bpl.n	8004974 <__sflush_r+0x44>
 8004968:	6863      	ldr	r3, [r4, #4]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800496e:	b10b      	cbz	r3, 8004974 <__sflush_r+0x44>
 8004970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	d106      	bne.n	8004992 <__sflush_r+0x62>
 8004984:	6829      	ldr	r1, [r5, #0]
 8004986:	291d      	cmp	r1, #29
 8004988:	d82b      	bhi.n	80049e2 <__sflush_r+0xb2>
 800498a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a34 <__sflush_r+0x104>)
 800498c:	40ca      	lsrs	r2, r1
 800498e:	07d6      	lsls	r6, r2, #31
 8004990:	d527      	bpl.n	80049e2 <__sflush_r+0xb2>
 8004992:	2200      	movs	r2, #0
 8004994:	6062      	str	r2, [r4, #4]
 8004996:	04d9      	lsls	r1, r3, #19
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	d504      	bpl.n	80049a8 <__sflush_r+0x78>
 800499e:	1c42      	adds	r2, r0, #1
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0x76>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	b903      	cbnz	r3, 80049a8 <__sflush_r+0x78>
 80049a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	b1b9      	cbz	r1, 80049de <__sflush_r+0xae>
 80049ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b2:	4299      	cmp	r1, r3
 80049b4:	d002      	beq.n	80049bc <__sflush_r+0x8c>
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff fbf4 	bl	80041a4 <_free_r>
 80049bc:	2300      	movs	r3, #0
 80049be:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c0:	e00d      	b.n	80049de <__sflush_r+0xae>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	4602      	mov	r2, r0
 80049ca:	1c50      	adds	r0, r2, #1
 80049cc:	d1c9      	bne.n	8004962 <__sflush_r+0x32>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0c6      	beq.n	8004962 <__sflush_r+0x32>
 80049d4:	2b1d      	cmp	r3, #29
 80049d6:	d001      	beq.n	80049dc <__sflush_r+0xac>
 80049d8:	2b16      	cmp	r3, #22
 80049da:	d11e      	bne.n	8004a1a <__sflush_r+0xea>
 80049dc:	602f      	str	r7, [r5, #0]
 80049de:	2000      	movs	r0, #0
 80049e0:	e022      	b.n	8004a28 <__sflush_r+0xf8>
 80049e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e6:	b21b      	sxth	r3, r3
 80049e8:	e01b      	b.n	8004a22 <__sflush_r+0xf2>
 80049ea:	690f      	ldr	r7, [r1, #16]
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	d0f6      	beq.n	80049de <__sflush_r+0xae>
 80049f0:	0793      	lsls	r3, r2, #30
 80049f2:	680e      	ldr	r6, [r1, #0]
 80049f4:	bf08      	it	eq
 80049f6:	694b      	ldreq	r3, [r1, #20]
 80049f8:	600f      	str	r7, [r1, #0]
 80049fa:	bf18      	it	ne
 80049fc:	2300      	movne	r3, #0
 80049fe:	eba6 0807 	sub.w	r8, r6, r7
 8004a02:	608b      	str	r3, [r1, #8]
 8004a04:	f1b8 0f00 	cmp.w	r8, #0
 8004a08:	dde9      	ble.n	80049de <__sflush_r+0xae>
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a0e:	4643      	mov	r3, r8
 8004a10:	463a      	mov	r2, r7
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b0      	blx	r6
 8004a16:	2800      	cmp	r0, #0
 8004a18:	dc08      	bgt.n	8004a2c <__sflush_r+0xfc>
 8004a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	4407      	add	r7, r0
 8004a2e:	eba8 0800 	sub.w	r8, r8, r0
 8004a32:	e7e7      	b.n	8004a04 <__sflush_r+0xd4>
 8004a34:	20400001 	.word	0x20400001

08004a38 <_fflush_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b913      	cbnz	r3, 8004a48 <_fflush_r+0x10>
 8004a42:	2500      	movs	r5, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	b118      	cbz	r0, 8004a52 <_fflush_r+0x1a>
 8004a4a:	6a03      	ldr	r3, [r0, #32]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <_fflush_r+0x1a>
 8004a4e:	f7ff fa93 	bl	8003f78 <__sinit>
 8004a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f3      	beq.n	8004a42 <_fflush_r+0xa>
 8004a5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a5c:	07d0      	lsls	r0, r2, #31
 8004a5e:	d404      	bmi.n	8004a6a <_fflush_r+0x32>
 8004a60:	0599      	lsls	r1, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_fflush_r+0x32>
 8004a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a66:	f7ff fb8c 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	f7ff ff5f 	bl	8004930 <__sflush_r>
 8004a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a74:	07da      	lsls	r2, r3, #31
 8004a76:	4605      	mov	r5, r0
 8004a78:	d4e4      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	d4e1      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a82:	f7ff fb7f 	bl	8004184 <__retarget_lock_release_recursive>
 8004a86:	e7dd      	b.n	8004a44 <_fflush_r+0xc>

08004a88 <__swbuf_r>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	460e      	mov	r6, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	4605      	mov	r5, r0
 8004a90:	b118      	cbz	r0, 8004a9a <__swbuf_r+0x12>
 8004a92:	6a03      	ldr	r3, [r0, #32]
 8004a94:	b90b      	cbnz	r3, 8004a9a <__swbuf_r+0x12>
 8004a96:	f7ff fa6f 	bl	8003f78 <__sinit>
 8004a9a:	69a3      	ldr	r3, [r4, #24]
 8004a9c:	60a3      	str	r3, [r4, #8]
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	071a      	lsls	r2, r3, #28
 8004aa2:	d501      	bpl.n	8004aa8 <__swbuf_r+0x20>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	b943      	cbnz	r3, 8004aba <__swbuf_r+0x32>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f82a 	bl	8004b04 <__swsetup_r>
 8004ab0:	b118      	cbz	r0, 8004aba <__swbuf_r+0x32>
 8004ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	1a98      	subs	r0, r3, r2
 8004ac0:	6963      	ldr	r3, [r4, #20]
 8004ac2:	b2f6      	uxtb	r6, r6
 8004ac4:	4283      	cmp	r3, r0
 8004ac6:	4637      	mov	r7, r6
 8004ac8:	dc05      	bgt.n	8004ad6 <__swbuf_r+0x4e>
 8004aca:	4621      	mov	r1, r4
 8004acc:	4628      	mov	r0, r5
 8004ace:	f7ff ffb3 	bl	8004a38 <_fflush_r>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d1ed      	bne.n	8004ab2 <__swbuf_r+0x2a>
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	701e      	strb	r6, [r3, #0]
 8004ae4:	6962      	ldr	r2, [r4, #20]
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d004      	beq.n	8004af6 <__swbuf_r+0x6e>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d5e1      	bpl.n	8004ab6 <__swbuf_r+0x2e>
 8004af2:	2e0a      	cmp	r6, #10
 8004af4:	d1df      	bne.n	8004ab6 <__swbuf_r+0x2e>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f7ff ff9d 	bl	8004a38 <_fflush_r>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0d9      	beq.n	8004ab6 <__swbuf_r+0x2e>
 8004b02:	e7d6      	b.n	8004ab2 <__swbuf_r+0x2a>

08004b04 <__swsetup_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <__swsetup_r+0xa8>)
 8004b08:	4605      	mov	r5, r0
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	b118      	cbz	r0, 8004b18 <__swsetup_r+0x14>
 8004b10:	6a03      	ldr	r3, [r0, #32]
 8004b12:	b90b      	cbnz	r3, 8004b18 <__swsetup_r+0x14>
 8004b14:	f7ff fa30 	bl	8003f78 <__sinit>
 8004b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1c:	0719      	lsls	r1, r3, #28
 8004b1e:	d422      	bmi.n	8004b66 <__swsetup_r+0x62>
 8004b20:	06da      	lsls	r2, r3, #27
 8004b22:	d407      	bmi.n	8004b34 <__swsetup_r+0x30>
 8004b24:	2209      	movs	r2, #9
 8004b26:	602a      	str	r2, [r5, #0]
 8004b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b2c:	81a3      	strh	r3, [r4, #12]
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	e033      	b.n	8004b9c <__swsetup_r+0x98>
 8004b34:	0758      	lsls	r0, r3, #29
 8004b36:	d512      	bpl.n	8004b5e <__swsetup_r+0x5a>
 8004b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b3a:	b141      	cbz	r1, 8004b4e <__swsetup_r+0x4a>
 8004b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d002      	beq.n	8004b4a <__swsetup_r+0x46>
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff fb2d 	bl	80041a4 <_free_r>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b54:	81a3      	strh	r3, [r4, #12]
 8004b56:	2300      	movs	r3, #0
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	f043 0308 	orr.w	r3, r3, #8
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	b94b      	cbnz	r3, 8004b7e <__swsetup_r+0x7a>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b74:	d003      	beq.n	8004b7e <__swsetup_r+0x7a>
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f84f 	bl	8004c1c <__smakebuf_r>
 8004b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b82:	f013 0201 	ands.w	r2, r3, #1
 8004b86:	d00a      	beq.n	8004b9e <__swsetup_r+0x9a>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60a2      	str	r2, [r4, #8]
 8004b8c:	6962      	ldr	r2, [r4, #20]
 8004b8e:	4252      	negs	r2, r2
 8004b90:	61a2      	str	r2, [r4, #24]
 8004b92:	6922      	ldr	r2, [r4, #16]
 8004b94:	b942      	cbnz	r2, 8004ba8 <__swsetup_r+0xa4>
 8004b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b9a:	d1c5      	bne.n	8004b28 <__swsetup_r+0x24>
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
 8004b9e:	0799      	lsls	r1, r3, #30
 8004ba0:	bf58      	it	pl
 8004ba2:	6962      	ldrpl	r2, [r4, #20]
 8004ba4:	60a2      	str	r2, [r4, #8]
 8004ba6:	e7f4      	b.n	8004b92 <__swsetup_r+0x8e>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	e7f7      	b.n	8004b9c <__swsetup_r+0x98>
 8004bac:	2000001c 	.word	0x2000001c

08004bb0 <_sbrk_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d06      	ldr	r5, [pc, #24]	@ (8004bcc <_sbrk_r+0x1c>)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	602b      	str	r3, [r5, #0]
 8004bbc:	f7fc fbea 	bl	8001394 <_sbrk>
 8004bc0:	1c43      	adds	r3, r0, #1
 8004bc2:	d102      	bne.n	8004bca <_sbrk_r+0x1a>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	b103      	cbz	r3, 8004bca <_sbrk_r+0x1a>
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	20000600 	.word	0x20000600

08004bd0 <__swhatbuf_r>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	b096      	sub	sp, #88	@ 0x58
 8004bdc:	4615      	mov	r5, r2
 8004bde:	461e      	mov	r6, r3
 8004be0:	da0d      	bge.n	8004bfe <__swhatbuf_r+0x2e>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2340      	movne	r3, #64	@ 0x40
 8004bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	6031      	str	r1, [r6, #0]
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	b016      	add	sp, #88	@ 0x58
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
 8004bfe:	466a      	mov	r2, sp
 8004c00:	f000 f848 	bl	8004c94 <_fstat_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	dbec      	blt.n	8004be2 <__swhatbuf_r+0x12>
 8004c08:	9901      	ldr	r1, [sp, #4]
 8004c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c12:	4259      	negs	r1, r3
 8004c14:	4159      	adcs	r1, r3
 8004c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1a:	e7eb      	b.n	8004bf4 <__swhatbuf_r+0x24>

08004c1c <__smakebuf_r>:
 8004c1c:	898b      	ldrh	r3, [r1, #12]
 8004c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c20:	079d      	lsls	r5, r3, #30
 8004c22:	4606      	mov	r6, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	d507      	bpl.n	8004c38 <__smakebuf_r+0x1c>
 8004c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	2301      	movs	r3, #1
 8004c32:	6163      	str	r3, [r4, #20]
 8004c34:	b003      	add	sp, #12
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c38:	ab01      	add	r3, sp, #4
 8004c3a:	466a      	mov	r2, sp
 8004c3c:	f7ff ffc8 	bl	8004bd0 <__swhatbuf_r>
 8004c40:	9f00      	ldr	r7, [sp, #0]
 8004c42:	4605      	mov	r5, r0
 8004c44:	4639      	mov	r1, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7ff fb18 	bl	800427c <_malloc_r>
 8004c4c:	b948      	cbnz	r0, 8004c62 <__smakebuf_r+0x46>
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	059a      	lsls	r2, r3, #22
 8004c54:	d4ee      	bmi.n	8004c34 <__smakebuf_r+0x18>
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	e7e2      	b.n	8004c28 <__smakebuf_r+0xc>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	6020      	str	r0, [r4, #0]
 8004c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	9b01      	ldr	r3, [sp, #4]
 8004c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c72:	b15b      	cbz	r3, 8004c8c <__smakebuf_r+0x70>
 8004c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 f81d 	bl	8004cb8 <_isatty_r>
 8004c7e:	b128      	cbz	r0, 8004c8c <__smakebuf_r+0x70>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	431d      	orrs	r5, r3
 8004c90:	81a5      	strh	r5, [r4, #12]
 8004c92:	e7cf      	b.n	8004c34 <__smakebuf_r+0x18>

08004c94 <_fstat_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d07      	ldr	r5, [pc, #28]	@ (8004cb4 <_fstat_r+0x20>)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	f7fc fb4e 	bl	8001342 <_fstat>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	d102      	bne.n	8004cb0 <_fstat_r+0x1c>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b103      	cbz	r3, 8004cb0 <_fstat_r+0x1c>
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000600 	.word	0x20000600

08004cb8 <_isatty_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d06      	ldr	r5, [pc, #24]	@ (8004cd4 <_isatty_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fc fb4d 	bl	8001362 <_isatty>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_isatty_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_isatty_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000600 	.word	0x20000600

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
