
Pulse_length.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d24  08004d24  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d24  08004d24  00005d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d2c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  2000006c  08004d98  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004d98  0000660c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de07  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f27  00000000  00000000  00013ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00015dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a50  00000000  00000000  00016b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a77  00000000  00000000  00017550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f19e  00000000  00000000  00039fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cb8  00000000  00000000  00049165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011be1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef8  00000000  00000000  0011be60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c40 	.word	0x08004c40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004c40 	.word	0x08004c40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char* msg = "The two CANs are compliant with the 2.0A and B (active) specifications with a bitrate up to 1Mbit/s.";
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <main+0x40>)
 8000634:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fec3 	bl	80013c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f81d 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f9fb 	bl	8000a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f9cf 	bl	80009e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000646:	f000 f885 	bl	8000754 <MX_TIM2_Init>
  MX_TIM3_Init();
 800064a:	f000 f8f9 	bl	8000840 <MX_TIM3_Init>
  MX_TIM4_Init();
 800064e:	f000 f945 	bl	80008dc <MX_TIM4_Init>
  MX_TIM6_Init();
 8000652:	f000 f991 	bl	8000978 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <main+0x44>)
 8000658:	f002 f81a 	bl	8002690 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(systemStatus == RECEIVING){
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <main+0x48>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1fa      	bne.n	800065c <main+0x30>
		  process_signals();
 8000666:	f000 fa7b 	bl	8000b60 <process_signals>
	  if(systemStatus == RECEIVING){
 800066a:	e7f7      	b.n	800065c <main+0x30>
 800066c:	08004c58 	.word	0x08004c58
 8000670:	200000d0 	.word	0x200000d0
 8000674:	20000000 	.word	0x20000000

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	@ 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fcc3 	bl	8004012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fcd4 	bl	80020b4 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000712:	f000 fc29 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f974 	bl	8001a20 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073e:	f000 fc13 	bl	8000f68 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	@ 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000784:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <MX_TIM2_Init+0xe8>)
 8000786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800078a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800078c:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_TIM2_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <MX_TIM2_Init+0xe8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1462 - 1;
 8000798:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_TIM2_Init+0xe8>)
 800079a:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 800079e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a6:	4b25      	ldr	r3, [pc, #148]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ac:	4823      	ldr	r0, [pc, #140]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007ae:	f001 ff1f 	bl	80025f0 <HAL_TIM_Base_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007b8:	f000 fbd6 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	4619      	mov	r1, r3
 80007c8:	481c      	ldr	r0, [pc, #112]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007ca:	f002 fbab 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007d4:	f000 fbc8 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d8:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007da:	f002 f860 	bl	800289e <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007e4:	f000 fbc0 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_TIM2_Init+0xe8>)
 80007f8:	f002 ffa0 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 fbb1 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	@ 0x60
 8000808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 146;
 800080a:	2392      	movs	r3, #146	@ 0x92
 800080c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_TIM2_Init+0xe8>)
 800081e:	f002 fabf 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000828:	f000 fb9e 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <MX_TIM2_Init+0xe8>)
 800082e:	f000 fc39 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000832:	bf00      	nop
 8000834:	3738      	adds	r7, #56	@ 0x38
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000088 	.word	0x20000088

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_TIM3_Init+0x94>)
 800085e:	4a1e      	ldr	r2, [pc, #120]	@ (80008d8 <MX_TIM3_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_TIM3_Init+0x94>)
 8000864:	2253      	movs	r2, #83	@ 0x53
 8000866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_TIM3_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_TIM3_Init+0x94>)
 8000870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_TIM3_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_TIM3_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_TIM3_Init+0x94>)
 8000884:	f001 feb4 	bl	80025f0 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 fb6b 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_TIM3_Init+0x94>)
 80008a0:	f002 fb40 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fb5d 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_TIM3_Init+0x94>)
 80008bc:	f002 ff3e 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008c6:	f000 fb4f 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_TIM4_Init+0x94>)
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <MX_TIM4_Init+0x98>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_TIM4_Init+0x94>)
 8000900:	2253      	movs	r2, #83	@ 0x53
 8000902:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_TIM4_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_TIM4_Init+0x94>)
 800090c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000910:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_TIM4_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_TIM4_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800091e:	4814      	ldr	r0, [pc, #80]	@ (8000970 <MX_TIM4_Init+0x94>)
 8000920:	f001 fe66 	bl	80025f0 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 fb1d 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_TIM4_Init+0x94>)
 800093c:	f002 faf2 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 fb0f 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_TIM4_Init+0x94>)
 8000958:	f002 fef0 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000962:	f000 fb01 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000118 	.word	0x20000118
 8000974:	40000800 	.word	0x40000800

08000978 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_TIM6_Init+0x64>)
 8000988:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <MX_TIM6_Init+0x68>)
 800098a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_TIM6_Init+0x64>)
 800098e:	2253      	movs	r2, #83	@ 0x53
 8000990:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_TIM6_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 650;
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_TIM6_Init+0x64>)
 800099a:	f240 228a 	movw	r2, #650	@ 0x28a
 800099e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_TIM6_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_TIM6_Init+0x64>)
 80009a8:	f001 fe22 	bl	80025f0 <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009b2:	f000 fad9 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_TIM6_Init+0x64>)
 80009c4:	f002 feba 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009ce:	f000 facb 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000160 	.word	0x20000160
 80009e0:	40001000 	.word	0x40001000

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f002 ff1e 	bl	800385c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 fa9f 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a8 	.word	0x200001a8
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_GPIO_Init+0xd4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480e      	ldr	r0, [pc, #56]	@ (8000b10 <MX_GPIO_Init+0xd8>)
 8000ad6:	f000 fdf7 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OWC_RX_Pin */
  GPIO_InitStruct.Pin = OWC_RX_Pin;
 8000ada:	2340      	movs	r3, #64	@ 0x40
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ade:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OWC_RX_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000af0:	f000 fdea 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2017      	movs	r0, #23
 8000afa:	f000 fdae 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000afe:	2017      	movs	r0, #23
 8000b00:	f000 fdc7 	bl	8001692 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020000 	.word	0x40020000

08000b18 <enqueue_signal>:

	txStatus = BIT_PULSE;

}

static void enqueue_signal(uint16_t signal){
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]

	uint8_t nextindex = (signalBuffer.head + 1) % 64;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <enqueue_signal+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	3301      	adds	r3, #1
 8000b2a:	425a      	negs	r2, r3
 8000b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b30:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b34:	bf58      	it	pl
 8000b36:	4253      	negpl	r3, r2
 8000b38:	73fb      	strb	r3, [r7, #15]

	signalBuffer.items[signalBuffer.head] = signal;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <enqueue_signal+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <enqueue_signal+0x44>)
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	88fa      	ldrh	r2, [r7, #6]
 8000b48:	805a      	strh	r2, [r3, #2]
	signalBuffer.head = nextindex;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <enqueue_signal+0x44>)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	7013      	strb	r3, [r2, #0]

}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20000310 	.word	0x20000310

08000b60 <process_signals>:

static void process_signals(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

	while(signalBuffer.head != signalBuffer.tail){
 8000b66:	e05c      	b.n	8000c22 <process_signals+0xc2>

		currentSignal = signalBuffer.items[signalBuffer.tail];
 8000b68:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <process_signals+0xd8>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4a32      	ldr	r2, [pc, #200]	@ (8000c38 <process_signals+0xd8>)
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	885b      	ldrh	r3, [r3, #2]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <process_signals+0xdc>)
 8000b7a:	801a      	strh	r2, [r3, #0]

		if(currentSignal == 1000){
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <process_signals+0xdc>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b84:	d106      	bne.n	8000b94 <process_signals+0x34>

			printf("Received: %s\n\r", rxDataBuffer);
 8000b86:	492e      	ldr	r1, [pc, #184]	@ (8000c40 <process_signals+0xe0>)
 8000b88:	482e      	ldr	r0, [pc, #184]	@ (8000c44 <process_signals+0xe4>)
 8000b8a:	f003 f9ed 	bl	8003f68 <iprintf>
			reset_rx_state();
 8000b8e:	f000 f85f 	bl	8000c50 <reset_rx_state>
			return;
 8000b92:	e04e      	b.n	8000c32 <process_signals+0xd2>
		}

		if(rxBitIndex >= 8){
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <process_signals+0xe8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	d90a      	bls.n	8000bb4 <process_signals+0x54>
			rxDataIndex++;
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <process_signals+0xec>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <process_signals+0xec>)
 8000baa:	801a      	strh	r2, [r3, #0]
			rxBitIndex = 0;
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <process_signals+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			continue;
 8000bb2:	e036      	b.n	8000c22 <process_signals+0xc2>
		}

		bool bitValue = currentSignal <= 200 ? 1 : 0;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <process_signals+0xdc>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bba:	bf94      	ite	ls
 8000bbc:	2301      	movls	r3, #1
 8000bbe:	2300      	movhi	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
		rxDataBuffer[rxDataIndex] |= bitValue ? (0x80 >> rxBitIndex) : 0;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <process_signals+0x76>
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <process_signals+0xe8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	4113      	asrs	r3, r2
 8000bd4:	e000      	b.n	8000bd8 <process_signals+0x78>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <process_signals+0xec>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	b291      	uxth	r1, r2
 8000bde:	4608      	mov	r0, r1
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <process_signals+0xe0>)
 8000be2:	5c12      	ldrb	r2, [r2, r0]
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	b252      	sxtb	r2, r2
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	460a      	mov	r2, r1
 8000bf0:	b2d9      	uxtb	r1, r3
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <process_signals+0xe0>)
 8000bf4:	5499      	strb	r1, [r3, r2]
		uint8_t nextBufferIndex = (signalBuffer.tail + 1) % 64;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <process_signals+0xd8>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	425a      	negs	r2, r3
 8000c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c08:	bf58      	it	pl
 8000c0a:	4253      	negpl	r3, r2
 8000c0c:	71bb      	strb	r3, [r7, #6]
		signalBuffer.tail = nextBufferIndex;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <process_signals+0xd8>)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	7053      	strb	r3, [r2, #1]
		rxBitIndex++;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <process_signals+0xe8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <process_signals+0xe8>)
 8000c20:	701a      	strb	r2, [r3, #0]
	while(signalBuffer.head != signalBuffer.tail){
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <process_signals+0xd8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <process_signals+0xd8>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d19a      	bne.n	8000b68 <process_signals+0x8>
	}
}
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000310 	.word	0x20000310
 8000c3c:	20000392 	.word	0x20000392
 8000c40:	200001f4 	.word	0x200001f4
 8000c44:	08004cc0 	.word	0x08004cc0
 8000c48:	2000030e 	.word	0x2000030e
 8000c4c:	2000030c 	.word	0x2000030c

08000c50 <reset_rx_state>:

void reset_rx_state(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

	systemStatus = IDLE;
 8000c54:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <reset_rx_state+0x48>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	701a      	strb	r2, [r3, #0]
	rxBitIndex = 0;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <reset_rx_state+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
	rxDataIndex = 0;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <reset_rx_state+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	801a      	strh	r2, [r3, #0]
	triggerCount = 0;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <reset_rx_state+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	currentSignal = 0;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <reset_rx_state+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	801a      	strh	r2, [r3, #0]
	signalBuffer.head = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <reset_rx_state+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
	signalBuffer.tail = 0;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <reset_rx_state+0x5c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	705a      	strb	r2, [r3, #1]
	memset(rxDataBuffer, 0, 280);
 8000c7e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000c82:	2100      	movs	r1, #0
 8000c84:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <reset_rx_state+0x60>)
 8000c86:	f003 f9c4 	bl	8004012 <memset>
	memset(signalBuffer.items, 0, 64);
 8000c8a:	2240      	movs	r2, #64	@ 0x40
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <reset_rx_state+0x64>)
 8000c90:	f003 f9bf 	bl	8004012 <memset>

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	2000030e 	.word	0x2000030e
 8000ca0:	2000030c 	.word	0x2000030c
 8000ca4:	200001f0 	.word	0x200001f0
 8000ca8:	20000392 	.word	0x20000392
 8000cac:	20000310 	.word	0x20000310
 8000cb0:	200001f4 	.word	0x200001f4
 8000cb4:	20000312 	.word	0x20000312

08000cb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]

	uint16_t timeStamp =  __HAL_TIM_GET_COUNTER(&htim3);
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	81fb      	strh	r3, [r7, #14]
	uint16_t deltaTime = timeStamp - lastTriggerTime;
 8000cca:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	89fa      	ldrh	r2, [r7, #14]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	81bb      	strh	r3, [r7, #12]
	lastTriggerTime = timeStamp;
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	8013      	strh	r3, [r2, #0]
	triggerCount++;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000ce8:	701a      	strb	r2, [r3, #0]

	// Start of pulse
	if(triggerCount < 2){
 8000cea:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d941      	bls.n	8000d78 <HAL_GPIO_EXTI_Callback+0xc0>
		return;
	}

	// End of gap period
	if(triggerCount >= 3){
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d90a      	bls.n	8000d14 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000cfe:	4823      	ldr	r0, [pc, #140]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d00:	f001 fd9e 	bl	8002840 <HAL_TIM_Base_Stop_IT>
		enqueue_signal(deltaTime);
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff06 	bl	8000b18 <enqueue_signal>
		triggerCount = 1;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		return;
 8000d12:	e032      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0xc2>
	}

	// End of pulse period ------------------
	if(systemStatus == IDLE && (deltaTime >= 500 && deltaTime <= 750)){
 8000d14:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d113      	bne.n	8000d46 <HAL_GPIO_EXTI_Callback+0x8e>
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d24:	d30f      	bcc.n	8000d46 <HAL_GPIO_EXTI_Callback+0x8e>
 8000d26:	89bb      	ldrh	r3, [r7, #12]
 8000d28:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_GPIO_EXTI_Callback+0x8e>
	    systemStatus = RECEIVING;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
	    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
	    HAL_TIM_Base_Start_IT(&htim6);
 8000d3e:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d40:	f001 fd0e 	bl	8002760 <HAL_TIM_Base_Start_IT>
	    return;
 8000d44:	e019      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0xc2>
	}

	if(systemStatus == RECEIVING && (deltaTime >= 800)){
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10b      	bne.n	8000d68 <HAL_GPIO_EXTI_Callback+0xb0>
 8000d50:	89bb      	ldrh	r3, [r7, #12]
 8000d52:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000d56:	d307      	bcc.n	8000d68 <HAL_GPIO_EXTI_Callback+0xb0>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d5a:	f001 fd71 	bl	8002840 <HAL_TIM_Base_Stop_IT>
		enqueue_signal(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d62:	f7ff fed9 	bl	8000b18 <enqueue_signal>
		return;
 8000d66:	e008      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0xc2>
	}
	else{
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim6);
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000d72:	f001 fcf5 	bl	8002760 <HAL_TIM_Base_Start_IT>
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0xc2>
		return;
 8000d78:	bf00      	nop
	}
	// End of pulse period --------------------

}
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000d0 	.word	0x200000d0
 8000d84:	200001f2 	.word	0x200001f2
 8000d88:	200001f0 	.word	0x200001f0
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	20000000 	.word	0x20000000

08000d94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a59      	ldr	r2, [pc, #356]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d105      	bne.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000da4:	4857      	ldr	r0, [pc, #348]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000da6:	f001 fd4b 	bl	8002840 <HAL_TIM_Base_Stop_IT>
		reset_rx_state();
 8000daa:	f7ff ff51 	bl	8000c50 <reset_rx_state>
		//printf("Packet Dropped!\n\r");
		return;
 8000dae:	e0a6      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16a>
	}

	switch(txStatus){
 8000db0:	4b55      	ldr	r3, [pc, #340]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d04f      	beq.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0xc6>
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	f300 8087 	bgt.w	8000ece <HAL_TIM_PeriodElapsedCallback+0x13a>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x36>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d015      	beq.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000dc8:	e081      	b.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x13a>

	case STOP_PULSE:

		__HAL_TIM_SET_AUTORELOAD(&htim4, 1000 - 1);
 8000dca:	4b50      	ldr	r3, [pc, #320]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dda:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	484c      	ldr	r0, [pc, #304]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000de0:	f001 fdb6 	bl	8002950 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000de4:	4b49      	ldr	r3, [pc, #292]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24
		txStatus = END_OF_TRANSMISSION;
 8000dec:	4b46      	ldr	r3, [pc, #280]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	701a      	strb	r2, [r3, #0]

		break;
 8000df2:	e084      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16a>

	case BIT_PULSE:

		__HAL_TIM_SET_AUTORELOAD(&htim4, 150 - 1);
 8000df4:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2295      	movs	r2, #149	@ 0x95
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dfe:	2295      	movs	r2, #149	@ 0x95
 8000e00:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4842      	ldr	r0, [pc, #264]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e06:	f001 fda3 	bl	8002950 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e0a:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24

		txDataBit = txDataBuffer[txDataIndex] & (0x80 >> txBitIndex);
 8000e12:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e1c:	5c9b      	ldrb	r3, [r3, r2]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b3e      	ldr	r3, [pc, #248]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	410b      	asrs	r3, r1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e3a:	701a      	strb	r2, [r3, #0]
		txGapLength = txDataBit ? 104 : 327;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000e46:	2268      	movs	r2, #104	@ 0x68
 8000e48:	e001      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0xba>
 8000e4a:	f240 1247 	movw	r2, #327	@ 0x147
 8000e4e:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e50:	801a      	strh	r2, [r3, #0]
		txStatus = BIT_GAP;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]

		break;
 8000e58:	e051      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16a>

	case BIT_GAP:

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	482c      	ldr	r0, [pc, #176]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e5e:	f001 fe3f 	bl	8002ae0 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_AUTORELOAD(&htim4, txGapLength - 1);
 8000e62:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e70:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	3b01      	subs	r3, #1
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e7c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
		txStatus = BIT_PULSE;
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
		txBitIndex++;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e98:	701a      	strb	r2, [r3, #0]

		if(txBitIndex >= 8){
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d909      	bls.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x124>
			txBitIndex = 0;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			txDataIndex++;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eb6:	801a      	strh	r2, [r3, #0]
		}
		if(txDataIndex >= txDataLength){
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d31a      	bcc.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x168>
			txStatus = STOP_PULSE;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000ecc:	e016      	b.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x168>

	default:

		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480f      	ldr	r0, [pc, #60]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ed2:	f001 fe05 	bl	8002ae0 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim4);
 8000ed6:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ed8:	f001 fcb2 	bl	8002840 <HAL_TIM_Base_Stop_IT>
		txBitIndex = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		txDataIndex = 0;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
		txDataBit = 0;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		txDataLength = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	801a      	strh	r2, [r3, #0]
		systemStatus = IDLE;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	701a      	strb	r2, [r3, #0]
		return;
 8000efa:	e000      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16a>
		break;
 8000efc:	bf00      	nop

	}

}
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000160 	.word	0x20000160
 8000f08:	20000394 	.word	0x20000394
 8000f0c:	20000118 	.word	0x20000118
 8000f10:	20000088 	.word	0x20000088
 8000f14:	200004b4 	.word	0x200004b4
 8000f18:	20000398 	.word	0x20000398
 8000f1c:	200004b3 	.word	0x200004b3
 8000f20:	200004b2 	.word	0x200004b2
 8000f24:	200004b6 	.word	0x200004b6
 8000f28:	200004b0 	.word	0x200004b0
 8000f2c:	20000000 	.word	0x20000000

08000f30 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e009      	b.n	8000f56 <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	60ba      	str	r2, [r7, #8]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fb46 	bl	80005dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf1      	blt.n	8000f42 <_write+0x12>
  }
  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb2:	2007      	movs	r0, #7
 8000fb4:	f000 fb46 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a2d      	ldr	r2, [pc, #180]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ff2:	e04a      	b.n	800108a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <HAL_TIM_Base_MspInit+0xd4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10e      	bne.n	800101c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a23      	ldr	r2, [pc, #140]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
}
 800101a:	e036      	b.n	800108a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <HAL_TIM_Base_MspInit+0xd8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d116      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	201e      	movs	r0, #30
 8001048:	f000 fb07 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800104c:	201e      	movs	r0, #30
 800104e:	f000 fb20 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8001052:	e01a      	b.n	800108a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_TIM_Base_MspInit+0xdc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d115      	bne.n	800108a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6413      	str	r3, [r2, #64]	@ 0x40
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <HAL_TIM_Base_MspInit+0xd0>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2036      	movs	r0, #54	@ 0x36
 8001080:	f000 faeb 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001084:	2036      	movs	r0, #54	@ 0x36
 8001086:	f000 fb04 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40001000 	.word	0x40001000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c4:	d11d      	bne.n	8001102 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_TIM_MspPostInit+0x68>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_TIM_MspPostInit+0x68>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_TIM_MspPostInit+0x68>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010fe:	f000 fae3 	bl	80016c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_UART_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <HAL_UART_MspInit+0x8c>)
 800118a:	f000 fa9d 	bl	80016c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004400 	.word	0x40004400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <NMI_Handler+0x4>

080011ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <UsageFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fa:	f000 f933 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}

08001202 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OWC_RX_Pin);
 8001206:	2040      	movs	r0, #64	@ 0x40
 8001208:	f000 fbf2 	bl	80019f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <TIM4_IRQHandler+0x10>)
 8001216:	f001 fcd3 	bl	8002bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000118 	.word	0x20000118

08001224 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f001 fcc9 	bl	8002bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000160 	.word	0x20000160

08001238 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e00a      	b.n	8001260 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124a:	f3af 8000 	nop.w
 800124e:	4601      	mov	r1, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60ba      	str	r2, [r7, #8]
 8001256:	b2ca      	uxtb	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf0      	blt.n	800124a <_read+0x12>
  }

  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129a:	605a      	str	r2, [r3, #4]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f002 fed0 	bl	80040b0 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20020000 	.word	0x20020000
 800133c:	00000400 	.word	0x00000400
 8001340:	200004b8 	.word	0x200004b8
 8001344:	20000610 	.word	0x20000610

08001348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001370:	f7ff ffea 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	@ (80013ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800139a:	f002 fe8f 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff f945 	bl	800062c <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013b0:	08004d2c 	.word	0x08004d2c
  ldr r2, =_sbss
 80013b4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013b8:	2000060c 	.word	0x2000060c

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <HAL_Init+0x40>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_Init+0x40>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <HAL_Init+0x40>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f92b 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fdbe 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f943 	bl	80016ae <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f90b 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004
 800145c:	2000000c 	.word	0x2000000c
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000000c 	.word	0x2000000c
 8001488:	200004bc 	.word	0x200004bc

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200004bc 	.word	0x200004bc

080014a4 <__NVIC_SetPriorityGrouping>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e165      	b.n	80019b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f040 8154 	bne.w	80019aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d005      	beq.n	800171a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	2b02      	cmp	r3, #2
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d017      	beq.n	80017b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80ae 	beq.w	80019aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <HAL_GPIO_Init+0x300>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a5c      	ldr	r2, [pc, #368]	@ (80019c8 <HAL_GPIO_Init+0x300>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b5a      	ldr	r3, [pc, #360]	@ (80019c8 <HAL_GPIO_Init+0x300>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186a:	4a58      	ldr	r2, [pc, #352]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	@ (80019d0 <HAL_GPIO_Init+0x308>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x21a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	@ (80019d4 <HAL_GPIO_Init+0x30c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x216>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x212>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	@ (80019dc <HAL_GPIO_Init+0x314>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x20e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	@ (80019e0 <HAL_GPIO_Init+0x318>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x20a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	@ (80019e4 <HAL_GPIO_Init+0x31c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x206>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a49      	ldr	r2, [pc, #292]	@ (80019e8 <HAL_GPIO_Init+0x320>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x202>
 80018c6:	2306      	movs	r3, #6
 80018c8:	e00c      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e00a      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x21c>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	@ (80019cc <HAL_GPIO_Init+0x304>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <HAL_GPIO_Init+0x324>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a31      	ldr	r2, [pc, #196]	@ (80019ec <HAL_GPIO_Init+0x324>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_GPIO_Init+0x324>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <HAL_GPIO_Init+0x324>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <HAL_GPIO_Init+0x324>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_GPIO_Init+0x324>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_GPIO_Init+0x324>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_GPIO_Init+0x324>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f ae96 	bls.w	80016e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40013c00 	.word	0x40013c00

080019f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f952 	bl	8000cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0cc      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b68      	ldr	r3, [pc, #416]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d90c      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b65      	ldr	r3, [pc, #404]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a58      	ldr	r2, [pc, #352]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a52      	ldr	r2, [pc, #328]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d044      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d119      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	4b3f      	ldr	r3, [pc, #252]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e06f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b3b      	ldr	r3, [pc, #236]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e067      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4934      	ldr	r1, [pc, #208]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff fcbc 	bl	800148c <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff fcb8 	bl	800148c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e04f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d20c      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f855 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc1c 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08004cd0 	.word	0x08004cd0
 8001be4:	20000004 	.word	0x20000004
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c08:	f7ff fff0 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0a9b      	lsrs	r3, r3, #10
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	4903      	ldr	r1, [pc, #12]	@ (8001c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08004ce0 	.word	0x08004ce0

08001c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c30:	f7ff ffdc 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0b5b      	lsrs	r3, r3, #13
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	@ (8001c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	08004ce0 	.word	0x08004ce0

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c58:	b0ae      	sub	sp, #184	@ 0xb8
 8001c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7a:	4bcb      	ldr	r3, [pc, #812]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	f200 8206 	bhi.w	8002094 <HAL_RCC_GetSysClockFreq+0x440>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001cc5 	.word	0x08001cc5
 8001c94:	08002095 	.word	0x08002095
 8001c98:	08002095 	.word	0x08002095
 8001c9c:	08002095 	.word	0x08002095
 8001ca0:	08001ccd 	.word	0x08001ccd
 8001ca4:	08002095 	.word	0x08002095
 8001ca8:	08002095 	.word	0x08002095
 8001cac:	08002095 	.word	0x08002095
 8001cb0:	08001cd5 	.word	0x08001cd5
 8001cb4:	08002095 	.word	0x08002095
 8001cb8:	08002095 	.word	0x08002095
 8001cbc:	08002095 	.word	0x08002095
 8001cc0:	08001ec5 	.word	0x08001ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4bb9      	ldr	r3, [pc, #740]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x358>)
 8001cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cca:	e1e7      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ccc:	4bb8      	ldr	r3, [pc, #736]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cd2:	e1e3      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4bb4      	ldr	r3, [pc, #720]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce0:	4bb1      	ldr	r3, [pc, #708]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d071      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cec:	4bae      	ldr	r3, [pc, #696]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001cf8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d12:	4622      	mov	r2, r4
 8001d14:	462b      	mov	r3, r5
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	0159      	lsls	r1, r3, #5
 8001d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d24:	0150      	lsls	r0, r2, #5
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	1a51      	subs	r1, r2, r1
 8001d2e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d30:	4629      	mov	r1, r5
 8001d32:	eb63 0301 	sbc.w	r3, r3, r1
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d44:	4649      	mov	r1, r9
 8001d46:	018b      	lsls	r3, r1, #6
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4e:	4641      	mov	r1, r8
 8001d50:	018a      	lsls	r2, r1, #6
 8001d52:	4641      	mov	r1, r8
 8001d54:	1a51      	subs	r1, r2, r1
 8001d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d58:	4649      	mov	r1, r9
 8001d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	00cb      	lsls	r3, r1, #3
 8001d70:	4641      	mov	r1, r8
 8001d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d76:	4641      	mov	r1, r8
 8001d78:	00ca      	lsls	r2, r1, #3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4622      	mov	r2, r4
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d86:	462b      	mov	r3, r5
 8001d88:	460a      	mov	r2, r1
 8001d8a:	eb42 0303 	adc.w	r3, r2, r3
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	024b      	lsls	r3, r1, #9
 8001da0:	4621      	mov	r1, r4
 8001da2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da6:	4621      	mov	r1, r4
 8001da8:	024a      	lsls	r2, r1, #9
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001db8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001dbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001dc0:	f7fe fa76 	bl	80002b0 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dce:	e067      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd0:	4b75      	ldr	r3, [pc, #468]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ddc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dea:	2300      	movs	r3, #0
 8001dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001dee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	1a51      	subs	r1, r2, r1
 8001e0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e24:	4649      	mov	r1, r9
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	4641      	mov	r1, r8
 8001e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2e:	4641      	mov	r1, r8
 8001e30:	018a      	lsls	r2, r1, #6
 8001e32:	4641      	mov	r1, r8
 8001e34:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e38:	4649      	mov	r1, r9
 8001e3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e52:	4692      	mov	sl, r2
 8001e54:	469b      	mov	fp, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb1a 0303 	adds.w	r3, sl, r3
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	eb4b 0303 	adc.w	r3, fp, r3
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e72:	4629      	mov	r1, r5
 8001e74:	028b      	lsls	r3, r1, #10
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	028a      	lsls	r2, r1, #10
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e88:	2200      	movs	r2, #0
 8001e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e92:	f7fe fa0d 	bl	80002b0 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea0:	4b41      	ldr	r3, [pc, #260]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ec2:	e0eb      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b38      	ldr	r3, [pc, #224]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed0:	4b35      	ldr	r3, [pc, #212]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d06b      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001edc:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ef4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ef8:	4622      	mov	r2, r4
 8001efa:	462b      	mov	r3, r5
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4621      	mov	r1, r4
 8001f12:	1a51      	subs	r1, r2, r1
 8001f14:	61b9      	str	r1, [r7, #24]
 8001f16:	4629      	mov	r1, r5
 8001f18:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	018b      	lsls	r3, r1, #6
 8001f2e:	4651      	mov	r1, sl
 8001f30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f34:	4651      	mov	r1, sl
 8001f36:	018a      	lsls	r2, r1, #6
 8001f38:	4651      	mov	r1, sl
 8001f3a:	ebb2 0801 	subs.w	r8, r2, r1
 8001f3e:	4659      	mov	r1, fp
 8001f40:	eb63 0901 	sbc.w	r9, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f58:	4690      	mov	r8, r2
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	eb18 0303 	adds.w	r3, r8, r3
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	462b      	mov	r3, r5
 8001f66:	eb49 0303 	adc.w	r3, r9, r3
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f78:	4629      	mov	r1, r5
 8001f7a:	024b      	lsls	r3, r1, #9
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f82:	4621      	mov	r1, r4
 8001f84:	024a      	lsls	r2, r1, #9
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f8e:	2200      	movs	r2, #0
 8001f90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f98:	f7fe f98a 	bl	80002b0 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fa6:	e065      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x420>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x458>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001fce:	4642      	mov	r2, r8
 8001fd0:	464b      	mov	r3, r9
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	1a51      	subs	r1, r2, r1
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	4649      	mov	r1, r9
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002000:	4659      	mov	r1, fp
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	4651      	mov	r1, sl
 8002006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200a:	4651      	mov	r1, sl
 800200c:	018a      	lsls	r2, r1, #6
 800200e:	4651      	mov	r1, sl
 8002010:	1a54      	subs	r4, r2, r1
 8002012:	4659      	mov	r1, fp
 8002014:	eb63 0501 	sbc.w	r5, r3, r1
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	00eb      	lsls	r3, r5, #3
 8002022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002026:	00e2      	lsls	r2, r4, #3
 8002028:	4614      	mov	r4, r2
 800202a:	461d      	mov	r5, r3
 800202c:	4643      	mov	r3, r8
 800202e:	18e3      	adds	r3, r4, r3
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	464b      	mov	r3, r9
 8002034:	eb45 0303 	adc.w	r3, r5, r3
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002046:	4629      	mov	r1, r5
 8002048:	028b      	lsls	r3, r1, #10
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002050:	4621      	mov	r1, r4
 8002052:	028a      	lsls	r2, r1, #10
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800205c:	2200      	movs	r2, #0
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002060:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002066:	f7fe f923 	bl	80002b0 <__aeabi_uldivmod>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4613      	mov	r3, r2
 8002070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002074:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	0f1b      	lsrs	r3, r3, #28
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002092:	e003      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800209a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	37b8      	adds	r7, #184	@ 0xb8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	00f42400 	.word	0x00f42400

080020b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e28d      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8083 	beq.w	80021da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020d4:	4b94      	ldr	r3, [pc, #592]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d019      	beq.n	8002114 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020e0:	4b91      	ldr	r3, [pc, #580]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020f8:	d00c      	beq.n	8002114 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d112      	bne.n	800212c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b88      	ldr	r3, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002112:	d10b      	bne.n	800212c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d05b      	beq.n	80021d8 <HAL_RCC_OscConfig+0x124>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d157      	bne.n	80021d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e25a      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x90>
 8002136:	4b7c      	ldr	r3, [pc, #496]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7b      	ldr	r2, [pc, #492]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xcc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0xb4>
 800214e:	4b76      	ldr	r3, [pc, #472]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a75      	ldr	r2, [pc, #468]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b73      	ldr	r3, [pc, #460]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a72      	ldr	r2, [pc, #456]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xcc>
 8002168:	4b6f      	ldr	r3, [pc, #444]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6e      	ldr	r2, [pc, #440]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b6c      	ldr	r3, [pc, #432]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6b      	ldr	r2, [pc, #428]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f980 	bl	800148c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f97c 	bl	800148c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e21f      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b61      	ldr	r3, [pc, #388]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xdc>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f96c 	bl	800148c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff f968 	bl	800148c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e20b      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x104>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06f      	beq.n	80022c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021e6:	4b50      	ldr	r3, [pc, #320]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d017      	beq.n	8002222 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80021f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80021fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x186>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1d3      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4937      	ldr	r1, [pc, #220]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_OscConfig+0x278>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f915 	bl	800148c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff f911 	bl	800148c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1b4      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4925      	ldr	r1, [pc, #148]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_OscConfig+0x278>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f8f4 	bl	800148c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7ff f8f0 	bl	800148c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e193      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d036      	beq.n	8002340 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7ff f8d4 	bl	800148c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff f8d0 	bl	800148c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e173      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCC_OscConfig+0x274>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x234>
 8002306:	e01b      	b.n	8002340 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7ff f8bd 	bl	800148c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e00e      	b.n	8002334 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002316:	f7ff f8b9 	bl	800148c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d907      	bls.n	8002334 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e15c      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
 8002328:	40023800 	.word	0x40023800
 800232c:	42470000 	.word	0x42470000
 8002330:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b8a      	ldr	r3, [pc, #552]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ea      	bne.n	8002316 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8097 	beq.w	800247c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b83      	ldr	r3, [pc, #524]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b7f      	ldr	r3, [pc, #508]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	4a7e      	ldr	r2, [pc, #504]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	@ 0x40
 800236e:	4b7c      	ldr	r3, [pc, #496]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b79      	ldr	r3, [pc, #484]	@ (8002564 <HAL_RCC_OscConfig+0x4b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <HAL_RCC_OscConfig+0x4b0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a75      	ldr	r2, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x4b0>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7ff f879 	bl	800148c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7ff f875 	bl	800148c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e118      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002564 <HAL_RCC_OscConfig+0x4b0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x31e>
 80023c4:	4b66      	ldr	r3, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4a65      	ldr	r2, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x358>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x340>
 80023da:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	4a60      	ldr	r2, [pc, #384]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0x358>
 80023f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a59      	ldr	r2, [pc, #356]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002400:	4b57      	ldr	r3, [pc, #348]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	4a56      	ldr	r2, [pc, #344]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff f83a 	bl	800148c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7ff f836 	bl	800148c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0d7      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ee      	beq.n	800241c <HAL_RCC_OscConfig+0x368>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff f824 	bl	800148c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7ff f820 	bl	800148c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0c1      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ee      	bne.n	8002448 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	4a3a      	ldr	r2, [pc, #232]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800247a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80ad 	beq.w	80025e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002486:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d060      	beq.n	8002554 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d145      	bne.n	8002526 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_RCC_OscConfig+0x4b4>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fff4 	bl	800148c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fff0 	bl	800148c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e093      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	491b      	ldr	r1, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x4b4>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe ffc5 	bl	800148c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe ffc1 	bl	800148c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e064      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x452>
 8002524:	e05c      	b.n	80025e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_RCC_OscConfig+0x4b4>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe ffae 	bl	800148c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe ffaa 	bl	800148c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e04d      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x480>
 8002552:	e045      	b.n	80025e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e040      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000
 8002568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800256c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <HAL_RCC_OscConfig+0x538>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d030      	beq.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d129      	bne.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d122      	bne.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800259c:	4013      	ands	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d119      	bne.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d10f      	bne.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e041      	b.n	8002686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fcd4 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fd68 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e046      	b.n	8002736 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a23      	ldr	r2, [pc, #140]	@ (8002744 <HAL_TIM_Base_Start+0xb4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c2:	d01d      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002748 <HAL_TIM_Base_Start+0xb8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_TIM_Base_Start+0xbc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_TIM_Base_Start+0xc0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_TIM_Base_Start+0xc4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <HAL_TIM_Base_Start+0xc8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_TIM_Base_Start+0x70>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_TIM_Base_Start+0xcc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d111      	bne.n	8002724 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b06      	cmp	r3, #6
 8002710:	d010      	beq.n	8002734 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002722:	e007      	b.n	8002734 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40010400 	.word	0x40010400
 8002758:	40014000 	.word	0x40014000
 800275c:	40001800 	.word	0x40001800

08002760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d001      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e04e      	b.n	8002816 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <HAL_TIM_Base_Start_IT+0xc4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d022      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a2:	d01d      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_TIM_Base_Start_IT+0xc8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d018      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_TIM_Base_Start_IT+0xcc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_TIM_Base_Start_IT+0xd0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_TIM_Base_Start_IT+0xd4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_TIM_Base_Start_IT+0xd8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x80>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a18      	ldr	r2, [pc, #96]	@ (800283c <HAL_TIM_Base_Start_IT+0xdc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d010      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	e007      	b.n	8002814 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40010400 	.word	0x40010400
 8002838:	40014000 	.word	0x40014000
 800283c:	40001800 	.word	0x40001800

08002840 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <HAL_TIM_Base_Stop_IT+0x48>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_TIM_Base_Stop_IT+0x48>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e041      	b.n	8002934 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f839 	bl	800293c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 fc11 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_TIM_PWM_Start+0x24>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e022      	b.n	80029ba <HAL_TIM_PWM_Start+0x6a>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b04      	cmp	r3, #4
 8002978:	d109      	bne.n	800298e <HAL_TIM_PWM_Start+0x3e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e015      	b.n	80029ba <HAL_TIM_PWM_Start+0x6a>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d109      	bne.n	80029a8 <HAL_TIM_PWM_Start+0x58>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e008      	b.n	80029ba <HAL_TIM_PWM_Start+0x6a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07c      	b.n	8002abc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0x82>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d0:	e013      	b.n	80029fa <HAL_TIM_PWM_Start+0xaa>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0x92>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e0:	e00b      	b.n	80029fa <HAL_TIM_PWM_Start+0xaa>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_PWM_Start+0xa2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f0:	e003      	b.n	80029fa <HAL_TIM_PWM_Start+0xaa>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe74 	bl	80036f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac4 <HAL_TIM_PWM_Start+0x174>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_TIM_PWM_Start+0xcc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac8 <HAL_TIM_PWM_Start+0x178>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_PWM_Start+0xd0>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_Start+0xd2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <HAL_TIM_PWM_Start+0x174>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a48:	d01d      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <HAL_TIM_PWM_Start+0x17c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <HAL_TIM_PWM_Start+0x180>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <HAL_TIM_PWM_Start+0x184>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_TIM_PWM_Start+0x178>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a18      	ldr	r2, [pc, #96]	@ (8002ad8 <HAL_TIM_PWM_Start+0x188>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x136>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <HAL_TIM_PWM_Start+0x18c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d010      	beq.n	8002aba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fdfc 	bl	80036f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb8 <HAL_TIM_PWM_Stop+0xd8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_PWM_Stop+0x2c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_TIM_PWM_Stop+0xdc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIM_PWM_Stop+0x30>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_TIM_PWM_Stop+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <HAL_TIM_PWM_Stop+0x66>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_PWM_Stop+0x66>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_TIM_PWM_Stop+0x96>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_PWM_Stop+0x96>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0xa6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	e013      	b.n	8002bae <HAL_TIM_PWM_Stop+0xce>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PWM_Stop+0xb6>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b94:	e00b      	b.n	8002bae <HAL_TIM_PWM_Stop+0xce>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Stop+0xc6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba4:	e003      	b.n	8002bae <HAL_TIM_PWM_Stop+0xce>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d020      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0202 	mvn.w	r2, #2
 8002bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa5b 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa4d 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa5e 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d020      	beq.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0204 	mvn.w	r2, #4
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa35 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa27 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa38 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d020      	beq.n	8002cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa0f 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa01 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa12 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d020      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0210 	mvn.w	r2, #16
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9e9 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9db 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f9ec 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f834 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fd7c 	bl	8003848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f9bd 	bl	80030ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0220 	mvn.w	r2, #32
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fd4e 	bl	8003834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ae      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	f200 809f 	bhi.w	8002f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dce:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002f0d 	.word	0x08002f0d
 8002ddc:	08002f0d 	.word	0x08002f0d
 8002de0:	08002f0d 	.word	0x08002f0d
 8002de4:	08002e49 	.word	0x08002e49
 8002de8:	08002f0d 	.word	0x08002f0d
 8002dec:	08002f0d 	.word	0x08002f0d
 8002df0:	08002f0d 	.word	0x08002f0d
 8002df4:	08002e8b 	.word	0x08002e8b
 8002df8:	08002f0d 	.word	0x08002f0d
 8002dfc:	08002f0d 	.word	0x08002f0d
 8002e00:	08002f0d 	.word	0x08002f0d
 8002e04:	08002ecb 	.word	0x08002ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fa24 	bl	800325c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
      break;
 8002e46:	e064      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa74 	bl	800333c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      break;
 8002e88:	e043      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fac9 	bl	8003428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0208 	orr.w	r2, r2, #8
 8002ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69d9      	ldr	r1, [r3, #28]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
      break;
 8002ec8:	e023      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fb1d 	bl	8003510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	61da      	str	r2, [r3, #28]
      break;
 8002f0a:	e002      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIM_ConfigClockSource+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e0b4      	b.n	80030aa <HAL_TIM_ConfigClockSource+0x186>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f78:	d03e      	beq.n	8002ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7e:	f200 8087 	bhi.w	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	f000 8086 	beq.w	8003096 <HAL_TIM_ConfigClockSource+0x172>
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8e:	d87f      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b70      	cmp	r3, #112	@ 0x70
 8002f92:	d01a      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xa6>
 8002f94:	2b70      	cmp	r3, #112	@ 0x70
 8002f96:	d87b      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b60      	cmp	r3, #96	@ 0x60
 8002f9a:	d050      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x11a>
 8002f9c:	2b60      	cmp	r3, #96	@ 0x60
 8002f9e:	d877      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b50      	cmp	r3, #80	@ 0x50
 8002fa2:	d03c      	beq.n	800301e <HAL_TIM_ConfigClockSource+0xfa>
 8002fa4:	2b50      	cmp	r3, #80	@ 0x50
 8002fa6:	d873      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d058      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x13a>
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d86f      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b30      	cmp	r3, #48	@ 0x30
 8002fb2:	d064      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x15a>
 8002fb4:	2b30      	cmp	r3, #48	@ 0x30
 8002fb6:	d86b      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d060      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x15a>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d867      	bhi.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05c      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x15a>
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d05a      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x15a>
 8002fc8:	e062      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	f000 fb69 	bl	80036b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	609a      	str	r2, [r3, #8]
      break;
 8002ff6:	e04f      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003008:	f000 fb52 	bl	80036b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800301a:	609a      	str	r2, [r3, #8]
      break;
 800301c:	e03c      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	461a      	mov	r2, r3
 800302c:	f000 fac6 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2150      	movs	r1, #80	@ 0x50
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fb1f 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800303c:	e02c      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304a:	461a      	mov	r2, r3
 800304c:	f000 fae5 	bl	800361a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2160      	movs	r1, #96	@ 0x60
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fb0f 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800305c:	e01c      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	461a      	mov	r2, r3
 800306c:	f000 faa6 	bl	80035bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2140      	movs	r1, #64	@ 0x40
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faff 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800307c:	e00c      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f000 faf6 	bl	800367a <TIM_ITRx_SetConfig>
      break;
 800308e:	e003      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e000      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <TIM_Base_SetConfig+0x12c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003122:	d00f      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a43      	ldr	r2, [pc, #268]	@ (8003234 <TIM_Base_SetConfig+0x130>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <TIM_Base_SetConfig+0x134>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a41      	ldr	r2, [pc, #260]	@ (800323c <TIM_Base_SetConfig+0x138>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	@ (8003240 <TIM_Base_SetConfig+0x13c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a35      	ldr	r2, [pc, #212]	@ (8003230 <TIM_Base_SetConfig+0x12c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d02b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d027      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a32      	ldr	r2, [pc, #200]	@ (8003234 <TIM_Base_SetConfig+0x130>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d023      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a31      	ldr	r2, [pc, #196]	@ (8003238 <TIM_Base_SetConfig+0x134>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a30      	ldr	r2, [pc, #192]	@ (800323c <TIM_Base_SetConfig+0x138>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	@ (8003240 <TIM_Base_SetConfig+0x13c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d017      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2e      	ldr	r2, [pc, #184]	@ (8003244 <TIM_Base_SetConfig+0x140>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2d      	ldr	r2, [pc, #180]	@ (8003248 <TIM_Base_SetConfig+0x144>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <TIM_Base_SetConfig+0x148>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <TIM_Base_SetConfig+0x14c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <TIM_Base_SetConfig+0x150>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <TIM_Base_SetConfig+0x154>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <TIM_Base_SetConfig+0x12c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <TIM_Base_SetConfig+0x13c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
  }
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40010400 	.word	0x40010400
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800
 8003250:	40001800 	.word	0x40001800
 8003254:	40001c00 	.word	0x40001c00
 8003258:	40002000 	.word	0x40002000

0800325c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 0201 	bic.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0302 	bic.w	r3, r3, #2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a20      	ldr	r2, [pc, #128]	@ (8003334 <TIM_OC1_SetConfig+0xd8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_OC1_SetConfig+0x64>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <TIM_OC1_SetConfig+0xdc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10c      	bne.n	80032da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0308 	bic.w	r3, r3, #8
 80032c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <TIM_OC1_SetConfig+0xd8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_OC1_SetConfig+0x8e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <TIM_OC1_SetConfig+0xdc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40010000 	.word	0x40010000
 8003338:	40010400 	.word	0x40010400

0800333c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 0210 	bic.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0320 	bic.w	r3, r3, #32
 8003386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <TIM_OC2_SetConfig+0xe4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_OC2_SetConfig+0x68>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <TIM_OC2_SetConfig+0xe8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10d      	bne.n	80033c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a17      	ldr	r2, [pc, #92]	@ (8003420 <TIM_OC2_SetConfig+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC2_SetConfig+0x94>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <TIM_OC2_SetConfig+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d113      	bne.n	80033f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40010400 	.word	0x40010400

08003428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <TIM_OC3_SetConfig+0xe0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_OC3_SetConfig+0x66>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <TIM_OC3_SetConfig+0xe4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <TIM_OC3_SetConfig+0xe0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_OC3_SetConfig+0x92>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a15      	ldr	r2, [pc, #84]	@ (800350c <TIM_OC3_SetConfig+0xe4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40010000 	.word	0x40010000
 800350c:	40010400 	.word	0x40010400

08003510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a12      	ldr	r2, [pc, #72]	@ (80035b4 <TIM_OC4_SetConfig+0xa4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_OC4_SetConfig+0x68>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a11      	ldr	r2, [pc, #68]	@ (80035b8 <TIM_OC4_SetConfig+0xa8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800357e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40010400 	.word	0x40010400

080035bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0210 	bic.w	r2, r3, #16
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2201      	movs	r2, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e05a      	b.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a21      	ldr	r2, [pc, #132]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a0:	d01d      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1d      	ldr	r2, [pc, #116]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a17      	ldr	r2, [pc, #92]	@ (800382c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40001800 	.word	0x40001800

08003834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fc46 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	@ 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f82b 	bl	80038fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b0c0      	sub	sp, #256	@ 0x100
 8003902:	af00      	add	r7, sp, #0
 8003904:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	ea40 0301 	orr.w	r3, r0, r1
 8003924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003954:	f021 010c 	bic.w	r1, r1, #12
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003962:	430b      	orrs	r3, r1
 8003964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	6999      	ldr	r1, [r3, #24]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	ea40 0301 	orr.w	r3, r0, r1
 8003982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc8 <UART_SetConfig+0x2cc>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0xa0>
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8d      	ldr	r3, [pc, #564]	@ (8003bcc <UART_SetConfig+0x2d0>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d104      	bne.n	80039a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe f946 	bl	8001c2c <HAL_RCC_GetPCLK2Freq>
 80039a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039a4:	e003      	b.n	80039ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe f92d 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 80039aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b8:	f040 810c 	bne.w	8003bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039d6:	415b      	adcs	r3, r3
 80039d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039de:	4621      	mov	r1, r4
 80039e0:	eb12 0801 	adds.w	r8, r2, r1
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb43 0901 	adc.w	r9, r3, r1
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	eb18 0303 	adds.w	r3, r8, r3
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	eb49 0303 	adc.w	r3, r9, r3
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	18db      	adds	r3, r3, r3
 8003a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a30:	4613      	mov	r3, r2
 8003a32:	eb42 0303 	adc.w	r3, r2, r3
 8003a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a40:	f7fc fc36 	bl	80002b0 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a74:	4641      	mov	r1, r8
 8003a76:	eb12 0a01 	adds.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	4692      	mov	sl, r2
 8003a96:	469b      	mov	fp, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ad6:	f7fc fbeb 	bl	80002b0 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	@ 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003af6:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003af8:	fba3 2302 	umull	r2, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b04:	441c      	add	r4, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b20:	415b      	adcs	r3, r3
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b92:	f7fc fb8d 	bl	80002b0 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	@ 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3332      	adds	r3, #50	@ 0x32
 8003bae:	4a08      	ldr	r2, [pc, #32]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4422      	add	r2, r4
 8003bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc4:	e106      	b.n	8003dd4 <UART_SetConfig+0x4d8>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	6239      	str	r1, [r7, #32]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	1854      	adds	r4, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb43 0501 	adc.w	r5, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	eb45 0303 	adc.w	r3, r5, r3
 8003c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c42:	4629      	mov	r1, r5
 8003c44:	008b      	lsls	r3, r1, #2
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	008a      	lsls	r2, r1, #2
 8003c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c54:	f7fc fb2c 	bl	80002b0 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b60      	ldr	r3, [pc, #384]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	011c      	lsls	r4, r3, #4
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	61b9      	str	r1, [r7, #24]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6139      	str	r1, [r7, #16]
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cea:	4641      	mov	r1, r8
 8003cec:	008a      	lsls	r2, r1, #2
 8003cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cf2:	f7fc fadd 	bl	80002b0 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	@ 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	@ 0x32
 8003d10:	4a33      	ldr	r2, [pc, #204]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	441c      	add	r4, r3
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	415b      	adcs	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	1851      	adds	r1, r2, r1
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	4649      	mov	r1, r9
 8003d44:	414b      	adcs	r3, r1
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d54:	4659      	mov	r1, fp
 8003d56:	00cb      	lsls	r3, r1, #3
 8003d58:	4651      	mov	r1, sl
 8003d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5e:	4651      	mov	r1, sl
 8003d60:	00ca      	lsls	r2, r1, #3
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	4642      	mov	r2, r8
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	464b      	mov	r3, r9
 8003d70:	460a      	mov	r2, r1
 8003d72:	eb42 0303 	adc.w	r3, r2, r3
 8003d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d90:	4649      	mov	r1, r9
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	008a      	lsls	r2, r1, #2
 8003d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003da2:	f7fc fa85 	bl	80002b0 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	@ 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	3332      	adds	r3, #50	@ 0x32
 8003dbe:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4422      	add	r2, r4
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de0:	51eb851f 	.word	0x51eb851f

08003de4 <std>:
 8003de4:	2300      	movs	r3, #0
 8003de6:	b510      	push	{r4, lr}
 8003de8:	4604      	mov	r4, r0
 8003dea:	e9c0 3300 	strd	r3, r3, [r0]
 8003dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003df2:	6083      	str	r3, [r0, #8]
 8003df4:	8181      	strh	r1, [r0, #12]
 8003df6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003df8:	81c2      	strh	r2, [r0, #14]
 8003dfa:	6183      	str	r3, [r0, #24]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	2208      	movs	r2, #8
 8003e00:	305c      	adds	r0, #92	@ 0x5c
 8003e02:	f000 f906 	bl	8004012 <memset>
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <std+0x58>)
 8003e08:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <std+0x5c>)
 8003e0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <std+0x60>)
 8003e10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <std+0x64>)
 8003e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <std+0x68>)
 8003e18:	6224      	str	r4, [r4, #32]
 8003e1a:	429c      	cmp	r4, r3
 8003e1c:	d006      	beq.n	8003e2c <std+0x48>
 8003e1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e22:	4294      	cmp	r4, r2
 8003e24:	d002      	beq.n	8003e2c <std+0x48>
 8003e26:	33d0      	adds	r3, #208	@ 0xd0
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	d105      	bne.n	8003e38 <std+0x54>
 8003e2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e34:	f000 b966 	b.w	8004104 <__retarget_lock_init_recursive>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	08003f8d 	.word	0x08003f8d
 8003e40:	08003faf 	.word	0x08003faf
 8003e44:	08003fe7 	.word	0x08003fe7
 8003e48:	0800400b 	.word	0x0800400b
 8003e4c:	200004c0 	.word	0x200004c0

08003e50 <stdio_exit_handler>:
 8003e50:	4a02      	ldr	r2, [pc, #8]	@ (8003e5c <stdio_exit_handler+0xc>)
 8003e52:	4903      	ldr	r1, [pc, #12]	@ (8003e60 <stdio_exit_handler+0x10>)
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <stdio_exit_handler+0x14>)
 8003e56:	f000 b869 	b.w	8003f2c <_fwalk_sglue>
 8003e5a:	bf00      	nop
 8003e5c:	20000010 	.word	0x20000010
 8003e60:	080049a1 	.word	0x080049a1
 8003e64:	20000020 	.word	0x20000020

08003e68 <cleanup_stdio>:
 8003e68:	6841      	ldr	r1, [r0, #4]
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <cleanup_stdio+0x34>)
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	4604      	mov	r4, r0
 8003e72:	d001      	beq.n	8003e78 <cleanup_stdio+0x10>
 8003e74:	f000 fd94 	bl	80049a0 <_fflush_r>
 8003e78:	68a1      	ldr	r1, [r4, #8]
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <cleanup_stdio+0x38>)
 8003e7c:	4299      	cmp	r1, r3
 8003e7e:	d002      	beq.n	8003e86 <cleanup_stdio+0x1e>
 8003e80:	4620      	mov	r0, r4
 8003e82:	f000 fd8d 	bl	80049a0 <_fflush_r>
 8003e86:	68e1      	ldr	r1, [r4, #12]
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <cleanup_stdio+0x3c>)
 8003e8a:	4299      	cmp	r1, r3
 8003e8c:	d004      	beq.n	8003e98 <cleanup_stdio+0x30>
 8003e8e:	4620      	mov	r0, r4
 8003e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e94:	f000 bd84 	b.w	80049a0 <_fflush_r>
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200004c0 	.word	0x200004c0
 8003ea0:	20000528 	.word	0x20000528
 8003ea4:	20000590 	.word	0x20000590

08003ea8 <global_stdio_init.part.0>:
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <global_stdio_init.part.0+0x30>)
 8003eac:	4c0b      	ldr	r4, [pc, #44]	@ (8003edc <global_stdio_init.part.0+0x34>)
 8003eae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <global_stdio_init.part.0+0x38>)
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	f7ff ff94 	bl	8003de4 <std>
 8003ebc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2109      	movs	r1, #9
 8003ec4:	f7ff ff8e 	bl	8003de4 <std>
 8003ec8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ecc:	2202      	movs	r2, #2
 8003ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed2:	2112      	movs	r1, #18
 8003ed4:	f7ff bf86 	b.w	8003de4 <std>
 8003ed8:	200005f8 	.word	0x200005f8
 8003edc:	200004c0 	.word	0x200004c0
 8003ee0:	08003e51 	.word	0x08003e51

08003ee4 <__sfp_lock_acquire>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__sfp_lock_acquire+0x8>)
 8003ee6:	f000 b90e 	b.w	8004106 <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000601 	.word	0x20000601

08003ef0 <__sfp_lock_release>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	@ (8003ef8 <__sfp_lock_release+0x8>)
 8003ef2:	f000 b909 	b.w	8004108 <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	20000601 	.word	0x20000601

08003efc <__sinit>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	4604      	mov	r4, r0
 8003f00:	f7ff fff0 	bl	8003ee4 <__sfp_lock_acquire>
 8003f04:	6a23      	ldr	r3, [r4, #32]
 8003f06:	b11b      	cbz	r3, 8003f10 <__sinit+0x14>
 8003f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f0c:	f7ff bff0 	b.w	8003ef0 <__sfp_lock_release>
 8003f10:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <__sinit+0x28>)
 8003f12:	6223      	str	r3, [r4, #32]
 8003f14:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <__sinit+0x2c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f5      	bne.n	8003f08 <__sinit+0xc>
 8003f1c:	f7ff ffc4 	bl	8003ea8 <global_stdio_init.part.0>
 8003f20:	e7f2      	b.n	8003f08 <__sinit+0xc>
 8003f22:	bf00      	nop
 8003f24:	08003e69 	.word	0x08003e69
 8003f28:	200005f8 	.word	0x200005f8

08003f2c <_fwalk_sglue>:
 8003f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f30:	4607      	mov	r7, r0
 8003f32:	4688      	mov	r8, r1
 8003f34:	4614      	mov	r4, r2
 8003f36:	2600      	movs	r6, #0
 8003f38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f3c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f40:	d505      	bpl.n	8003f4e <_fwalk_sglue+0x22>
 8003f42:	6824      	ldr	r4, [r4, #0]
 8003f44:	2c00      	cmp	r4, #0
 8003f46:	d1f7      	bne.n	8003f38 <_fwalk_sglue+0xc>
 8003f48:	4630      	mov	r0, r6
 8003f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d907      	bls.n	8003f64 <_fwalk_sglue+0x38>
 8003f54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	d003      	beq.n	8003f64 <_fwalk_sglue+0x38>
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4638      	mov	r0, r7
 8003f60:	47c0      	blx	r8
 8003f62:	4306      	orrs	r6, r0
 8003f64:	3568      	adds	r5, #104	@ 0x68
 8003f66:	e7e9      	b.n	8003f3c <_fwalk_sglue+0x10>

08003f68 <iprintf>:
 8003f68:	b40f      	push	{r0, r1, r2, r3}
 8003f6a:	b507      	push	{r0, r1, r2, lr}
 8003f6c:	4906      	ldr	r1, [pc, #24]	@ (8003f88 <iprintf+0x20>)
 8003f6e:	ab04      	add	r3, sp, #16
 8003f70:	6808      	ldr	r0, [r1, #0]
 8003f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f76:	6881      	ldr	r1, [r0, #8]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	f000 f9e9 	bl	8004350 <_vfiprintf_r>
 8003f7e:	b003      	add	sp, #12
 8003f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f84:	b004      	add	sp, #16
 8003f86:	4770      	bx	lr
 8003f88:	2000001c 	.word	0x2000001c

08003f8c <__sread>:
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	460c      	mov	r4, r1
 8003f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f94:	f000 f868 	bl	8004068 <_read_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	bfab      	itete	ge
 8003f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003fa0:	181b      	addge	r3, r3, r0
 8003fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fa6:	bfac      	ite	ge
 8003fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003faa:	81a3      	strhlt	r3, [r4, #12]
 8003fac:	bd10      	pop	{r4, pc}

08003fae <__swrite>:
 8003fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	898b      	ldrh	r3, [r1, #12]
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	d505      	bpl.n	8003fcc <__swrite+0x1e>
 8003fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f000 f83c 	bl	8004044 <_lseek_r>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	463b      	mov	r3, r7
 8003fdc:	4628      	mov	r0, r5
 8003fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	f000 b853 	b.w	800408c <_write_r>

08003fe6 <__sseek>:
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	460c      	mov	r4, r1
 8003fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fee:	f000 f829 	bl	8004044 <_lseek_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	bf15      	itete	ne
 8003ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004002:	81a3      	strheq	r3, [r4, #12]
 8004004:	bf18      	it	ne
 8004006:	81a3      	strhne	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__sclose>:
 800400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400e:	f000 b809 	b.w	8004024 <_close_r>

08004012 <memset>:
 8004012:	4402      	add	r2, r0
 8004014:	4603      	mov	r3, r0
 8004016:	4293      	cmp	r3, r2
 8004018:	d100      	bne.n	800401c <memset+0xa>
 800401a:	4770      	bx	lr
 800401c:	f803 1b01 	strb.w	r1, [r3], #1
 8004020:	e7f9      	b.n	8004016 <memset+0x4>
	...

08004024 <_close_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d06      	ldr	r5, [pc, #24]	@ (8004040 <_close_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fd f91f 	bl	8001272 <_close>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_close_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_close_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200005fc 	.word	0x200005fc

08004044 <_lseek_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d07      	ldr	r5, [pc, #28]	@ (8004064 <_lseek_r+0x20>)
 8004048:	4604      	mov	r4, r0
 800404a:	4608      	mov	r0, r1
 800404c:	4611      	mov	r1, r2
 800404e:	2200      	movs	r2, #0
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7fd f934 	bl	80012c0 <_lseek>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_lseek_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_lseek_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200005fc 	.word	0x200005fc

08004068 <_read_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d07      	ldr	r5, [pc, #28]	@ (8004088 <_read_r+0x20>)
 800406c:	4604      	mov	r4, r0
 800406e:	4608      	mov	r0, r1
 8004070:	4611      	mov	r1, r2
 8004072:	2200      	movs	r2, #0
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fd f8de 	bl	8001238 <_read>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_read_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_read_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	200005fc 	.word	0x200005fc

0800408c <_write_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d07      	ldr	r5, [pc, #28]	@ (80040ac <_write_r+0x20>)
 8004090:	4604      	mov	r4, r0
 8004092:	4608      	mov	r0, r1
 8004094:	4611      	mov	r1, r2
 8004096:	2200      	movs	r2, #0
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7fc ff48 	bl	8000f30 <_write>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_write_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_write_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	200005fc 	.word	0x200005fc

080040b0 <__errno>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <__errno+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	2000001c 	.word	0x2000001c

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4d0d      	ldr	r5, [pc, #52]	@ (80040f4 <__libc_init_array+0x38>)
 80040c0:	4c0d      	ldr	r4, [pc, #52]	@ (80040f8 <__libc_init_array+0x3c>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	2600      	movs	r6, #0
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4d0b      	ldr	r5, [pc, #44]	@ (80040fc <__libc_init_array+0x40>)
 80040ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004100 <__libc_init_array+0x44>)
 80040d0:	f000 fdb6 	bl	8004c40 <_init>
 80040d4:	1b64      	subs	r4, r4, r5
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	2600      	movs	r6, #0
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	08004d24 	.word	0x08004d24
 80040f8:	08004d24 	.word	0x08004d24
 80040fc:	08004d24 	.word	0x08004d24
 8004100:	08004d28 	.word	0x08004d28

08004104 <__retarget_lock_init_recursive>:
 8004104:	4770      	bx	lr

08004106 <__retarget_lock_acquire_recursive>:
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_release_recursive>:
 8004108:	4770      	bx	lr
	...

0800410c <_free_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4605      	mov	r5, r0
 8004110:	2900      	cmp	r1, #0
 8004112:	d041      	beq.n	8004198 <_free_r+0x8c>
 8004114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004118:	1f0c      	subs	r4, r1, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	18e4      	addlt	r4, r4, r3
 8004120:	f000 f8e0 	bl	80042e4 <__malloc_lock>
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <_free_r+0x90>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	b933      	cbnz	r3, 8004138 <_free_r+0x2c>
 800412a:	6063      	str	r3, [r4, #4]
 800412c:	6014      	str	r4, [r2, #0]
 800412e:	4628      	mov	r0, r5
 8004130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004134:	f000 b8dc 	b.w	80042f0 <__malloc_unlock>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d908      	bls.n	800414e <_free_r+0x42>
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	1821      	adds	r1, r4, r0
 8004140:	428b      	cmp	r3, r1
 8004142:	bf01      	itttt	eq
 8004144:	6819      	ldreq	r1, [r3, #0]
 8004146:	685b      	ldreq	r3, [r3, #4]
 8004148:	1809      	addeq	r1, r1, r0
 800414a:	6021      	streq	r1, [r4, #0]
 800414c:	e7ed      	b.n	800412a <_free_r+0x1e>
 800414e:	461a      	mov	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b10b      	cbz	r3, 8004158 <_free_r+0x4c>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d9fa      	bls.n	800414e <_free_r+0x42>
 8004158:	6811      	ldr	r1, [r2, #0]
 800415a:	1850      	adds	r0, r2, r1
 800415c:	42a0      	cmp	r0, r4
 800415e:	d10b      	bne.n	8004178 <_free_r+0x6c>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	4401      	add	r1, r0
 8004164:	1850      	adds	r0, r2, r1
 8004166:	4283      	cmp	r3, r0
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	d1e0      	bne.n	800412e <_free_r+0x22>
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6053      	str	r3, [r2, #4]
 8004172:	4408      	add	r0, r1
 8004174:	6010      	str	r0, [r2, #0]
 8004176:	e7da      	b.n	800412e <_free_r+0x22>
 8004178:	d902      	bls.n	8004180 <_free_r+0x74>
 800417a:	230c      	movs	r3, #12
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	e7d6      	b.n	800412e <_free_r+0x22>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	1821      	adds	r1, r4, r0
 8004184:	428b      	cmp	r3, r1
 8004186:	bf04      	itt	eq
 8004188:	6819      	ldreq	r1, [r3, #0]
 800418a:	685b      	ldreq	r3, [r3, #4]
 800418c:	6063      	str	r3, [r4, #4]
 800418e:	bf04      	itt	eq
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	6054      	str	r4, [r2, #4]
 8004196:	e7ca      	b.n	800412e <_free_r+0x22>
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	20000608 	.word	0x20000608

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0f      	ldr	r6, [pc, #60]	@ (80041e0 <sbrk_aligned+0x40>)
 80041a4:	460c      	mov	r4, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	4605      	mov	r5, r0
 80041aa:	b911      	cbnz	r1, 80041b2 <sbrk_aligned+0x12>
 80041ac:	f000 fcb4 	bl	8004b18 <_sbrk_r>
 80041b0:	6030      	str	r0, [r6, #0]
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 fcaf 	bl	8004b18 <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d103      	bne.n	80041c6 <sbrk_aligned+0x26>
 80041be:	f04f 34ff 	mov.w	r4, #4294967295
 80041c2:	4620      	mov	r0, r4
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	1cc4      	adds	r4, r0, #3
 80041c8:	f024 0403 	bic.w	r4, r4, #3
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d0f8      	beq.n	80041c2 <sbrk_aligned+0x22>
 80041d0:	1a21      	subs	r1, r4, r0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 fca0 	bl	8004b18 <_sbrk_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d1f2      	bne.n	80041c2 <sbrk_aligned+0x22>
 80041dc:	e7ef      	b.n	80041be <sbrk_aligned+0x1e>
 80041de:	bf00      	nop
 80041e0:	20000604 	.word	0x20000604

080041e4 <_malloc_r>:
 80041e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e8:	1ccd      	adds	r5, r1, #3
 80041ea:	f025 0503 	bic.w	r5, r5, #3
 80041ee:	3508      	adds	r5, #8
 80041f0:	2d0c      	cmp	r5, #12
 80041f2:	bf38      	it	cc
 80041f4:	250c      	movcc	r5, #12
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	4606      	mov	r6, r0
 80041fa:	db01      	blt.n	8004200 <_malloc_r+0x1c>
 80041fc:	42a9      	cmp	r1, r5
 80041fe:	d904      	bls.n	800420a <_malloc_r+0x26>
 8004200:	230c      	movs	r3, #12
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	2000      	movs	r0, #0
 8004206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042e0 <_malloc_r+0xfc>
 800420e:	f000 f869 	bl	80042e4 <__malloc_lock>
 8004212:	f8d8 3000 	ldr.w	r3, [r8]
 8004216:	461c      	mov	r4, r3
 8004218:	bb44      	cbnz	r4, 800426c <_malloc_r+0x88>
 800421a:	4629      	mov	r1, r5
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff ffbf 	bl	80041a0 <sbrk_aligned>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	4604      	mov	r4, r0
 8004226:	d158      	bne.n	80042da <_malloc_r+0xf6>
 8004228:	f8d8 4000 	ldr.w	r4, [r8]
 800422c:	4627      	mov	r7, r4
 800422e:	2f00      	cmp	r7, #0
 8004230:	d143      	bne.n	80042ba <_malloc_r+0xd6>
 8004232:	2c00      	cmp	r4, #0
 8004234:	d04b      	beq.n	80042ce <_malloc_r+0xea>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	4639      	mov	r1, r7
 800423a:	4630      	mov	r0, r6
 800423c:	eb04 0903 	add.w	r9, r4, r3
 8004240:	f000 fc6a 	bl	8004b18 <_sbrk_r>
 8004244:	4581      	cmp	r9, r0
 8004246:	d142      	bne.n	80042ce <_malloc_r+0xea>
 8004248:	6821      	ldr	r1, [r4, #0]
 800424a:	1a6d      	subs	r5, r5, r1
 800424c:	4629      	mov	r1, r5
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff ffa6 	bl	80041a0 <sbrk_aligned>
 8004254:	3001      	adds	r0, #1
 8004256:	d03a      	beq.n	80042ce <_malloc_r+0xea>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	442b      	add	r3, r5
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	f8d8 3000 	ldr.w	r3, [r8]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	bb62      	cbnz	r2, 80042c0 <_malloc_r+0xdc>
 8004266:	f8c8 7000 	str.w	r7, [r8]
 800426a:	e00f      	b.n	800428c <_malloc_r+0xa8>
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	1b52      	subs	r2, r2, r5
 8004270:	d420      	bmi.n	80042b4 <_malloc_r+0xd0>
 8004272:	2a0b      	cmp	r2, #11
 8004274:	d917      	bls.n	80042a6 <_malloc_r+0xc2>
 8004276:	1961      	adds	r1, r4, r5
 8004278:	42a3      	cmp	r3, r4
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	bf18      	it	ne
 800427e:	6059      	strne	r1, [r3, #4]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	bf08      	it	eq
 8004284:	f8c8 1000 	streq.w	r1, [r8]
 8004288:	5162      	str	r2, [r4, r5]
 800428a:	604b      	str	r3, [r1, #4]
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f82f 	bl	80042f0 <__malloc_unlock>
 8004292:	f104 000b 	add.w	r0, r4, #11
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	f020 0007 	bic.w	r0, r0, #7
 800429c:	1ac2      	subs	r2, r0, r3
 800429e:	bf1c      	itt	ne
 80042a0:	1a1b      	subne	r3, r3, r0
 80042a2:	50a3      	strne	r3, [r4, r2]
 80042a4:	e7af      	b.n	8004206 <_malloc_r+0x22>
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	bf0c      	ite	eq
 80042ac:	f8c8 2000 	streq.w	r2, [r8]
 80042b0:	605a      	strne	r2, [r3, #4]
 80042b2:	e7eb      	b.n	800428c <_malloc_r+0xa8>
 80042b4:	4623      	mov	r3, r4
 80042b6:	6864      	ldr	r4, [r4, #4]
 80042b8:	e7ae      	b.n	8004218 <_malloc_r+0x34>
 80042ba:	463c      	mov	r4, r7
 80042bc:	687f      	ldr	r7, [r7, #4]
 80042be:	e7b6      	b.n	800422e <_malloc_r+0x4a>
 80042c0:	461a      	mov	r2, r3
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d1fb      	bne.n	80042c0 <_malloc_r+0xdc>
 80042c8:	2300      	movs	r3, #0
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e7de      	b.n	800428c <_malloc_r+0xa8>
 80042ce:	230c      	movs	r3, #12
 80042d0:	6033      	str	r3, [r6, #0]
 80042d2:	4630      	mov	r0, r6
 80042d4:	f000 f80c 	bl	80042f0 <__malloc_unlock>
 80042d8:	e794      	b.n	8004204 <_malloc_r+0x20>
 80042da:	6005      	str	r5, [r0, #0]
 80042dc:	e7d6      	b.n	800428c <_malloc_r+0xa8>
 80042de:	bf00      	nop
 80042e0:	20000608 	.word	0x20000608

080042e4 <__malloc_lock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	@ (80042ec <__malloc_lock+0x8>)
 80042e6:	f7ff bf0e 	b.w	8004106 <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000600 	.word	0x20000600

080042f0 <__malloc_unlock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	@ (80042f8 <__malloc_unlock+0x8>)
 80042f2:	f7ff bf09 	b.w	8004108 <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000600 	.word	0x20000600

080042fc <__sfputc_r>:
 80042fc:	6893      	ldr	r3, [r2, #8]
 80042fe:	3b01      	subs	r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	b410      	push	{r4}
 8004304:	6093      	str	r3, [r2, #8]
 8004306:	da08      	bge.n	800431a <__sfputc_r+0x1e>
 8004308:	6994      	ldr	r4, [r2, #24]
 800430a:	42a3      	cmp	r3, r4
 800430c:	db01      	blt.n	8004312 <__sfputc_r+0x16>
 800430e:	290a      	cmp	r1, #10
 8004310:	d103      	bne.n	800431a <__sfputc_r+0x1e>
 8004312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004316:	f000 bb6b 	b.w	80049f0 <__swbuf_r>
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	1c58      	adds	r0, r3, #1
 800431e:	6010      	str	r0, [r2, #0]
 8004320:	7019      	strb	r1, [r3, #0]
 8004322:	4608      	mov	r0, r1
 8004324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004328:	4770      	bx	lr

0800432a <__sfputs_r>:
 800432a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432c:	4606      	mov	r6, r0
 800432e:	460f      	mov	r7, r1
 8004330:	4614      	mov	r4, r2
 8004332:	18d5      	adds	r5, r2, r3
 8004334:	42ac      	cmp	r4, r5
 8004336:	d101      	bne.n	800433c <__sfputs_r+0x12>
 8004338:	2000      	movs	r0, #0
 800433a:	e007      	b.n	800434c <__sfputs_r+0x22>
 800433c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004340:	463a      	mov	r2, r7
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff ffda 	bl	80042fc <__sfputc_r>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d1f3      	bne.n	8004334 <__sfputs_r+0xa>
 800434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004350 <_vfiprintf_r>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	460d      	mov	r5, r1
 8004356:	b09d      	sub	sp, #116	@ 0x74
 8004358:	4614      	mov	r4, r2
 800435a:	4698      	mov	r8, r3
 800435c:	4606      	mov	r6, r0
 800435e:	b118      	cbz	r0, 8004368 <_vfiprintf_r+0x18>
 8004360:	6a03      	ldr	r3, [r0, #32]
 8004362:	b90b      	cbnz	r3, 8004368 <_vfiprintf_r+0x18>
 8004364:	f7ff fdca 	bl	8003efc <__sinit>
 8004368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800436a:	07d9      	lsls	r1, r3, #31
 800436c:	d405      	bmi.n	800437a <_vfiprintf_r+0x2a>
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	059a      	lsls	r2, r3, #22
 8004372:	d402      	bmi.n	800437a <_vfiprintf_r+0x2a>
 8004374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004376:	f7ff fec6 	bl	8004106 <__retarget_lock_acquire_recursive>
 800437a:	89ab      	ldrh	r3, [r5, #12]
 800437c:	071b      	lsls	r3, r3, #28
 800437e:	d501      	bpl.n	8004384 <_vfiprintf_r+0x34>
 8004380:	692b      	ldr	r3, [r5, #16]
 8004382:	b99b      	cbnz	r3, 80043ac <_vfiprintf_r+0x5c>
 8004384:	4629      	mov	r1, r5
 8004386:	4630      	mov	r0, r6
 8004388:	f000 fb70 	bl	8004a6c <__swsetup_r>
 800438c:	b170      	cbz	r0, 80043ac <_vfiprintf_r+0x5c>
 800438e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004390:	07dc      	lsls	r4, r3, #31
 8004392:	d504      	bpl.n	800439e <_vfiprintf_r+0x4e>
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	b01d      	add	sp, #116	@ 0x74
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	89ab      	ldrh	r3, [r5, #12]
 80043a0:	0598      	lsls	r0, r3, #22
 80043a2:	d4f7      	bmi.n	8004394 <_vfiprintf_r+0x44>
 80043a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043a6:	f7ff feaf 	bl	8004108 <__retarget_lock_release_recursive>
 80043aa:	e7f3      	b.n	8004394 <_vfiprintf_r+0x44>
 80043ac:	2300      	movs	r3, #0
 80043ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b0:	2320      	movs	r3, #32
 80043b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ba:	2330      	movs	r3, #48	@ 0x30
 80043bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800456c <_vfiprintf_r+0x21c>
 80043c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043c4:	f04f 0901 	mov.w	r9, #1
 80043c8:	4623      	mov	r3, r4
 80043ca:	469a      	mov	sl, r3
 80043cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d0:	b10a      	cbz	r2, 80043d6 <_vfiprintf_r+0x86>
 80043d2:	2a25      	cmp	r2, #37	@ 0x25
 80043d4:	d1f9      	bne.n	80043ca <_vfiprintf_r+0x7a>
 80043d6:	ebba 0b04 	subs.w	fp, sl, r4
 80043da:	d00b      	beq.n	80043f4 <_vfiprintf_r+0xa4>
 80043dc:	465b      	mov	r3, fp
 80043de:	4622      	mov	r2, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	4630      	mov	r0, r6
 80043e4:	f7ff ffa1 	bl	800432a <__sfputs_r>
 80043e8:	3001      	adds	r0, #1
 80043ea:	f000 80a7 	beq.w	800453c <_vfiprintf_r+0x1ec>
 80043ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043f0:	445a      	add	r2, fp
 80043f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80043f4:	f89a 3000 	ldrb.w	r3, [sl]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 809f 	beq.w	800453c <_vfiprintf_r+0x1ec>
 80043fe:	2300      	movs	r3, #0
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004408:	f10a 0a01 	add.w	sl, sl, #1
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004414:	931a      	str	r3, [sp, #104]	@ 0x68
 8004416:	4654      	mov	r4, sl
 8004418:	2205      	movs	r2, #5
 800441a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800441e:	4853      	ldr	r0, [pc, #332]	@ (800456c <_vfiprintf_r+0x21c>)
 8004420:	f7fb fef6 	bl	8000210 <memchr>
 8004424:	9a04      	ldr	r2, [sp, #16]
 8004426:	b9d8      	cbnz	r0, 8004460 <_vfiprintf_r+0x110>
 8004428:	06d1      	lsls	r1, r2, #27
 800442a:	bf44      	itt	mi
 800442c:	2320      	movmi	r3, #32
 800442e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004432:	0713      	lsls	r3, r2, #28
 8004434:	bf44      	itt	mi
 8004436:	232b      	movmi	r3, #43	@ 0x2b
 8004438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800443c:	f89a 3000 	ldrb.w	r3, [sl]
 8004440:	2b2a      	cmp	r3, #42	@ 0x2a
 8004442:	d015      	beq.n	8004470 <_vfiprintf_r+0x120>
 8004444:	9a07      	ldr	r2, [sp, #28]
 8004446:	4654      	mov	r4, sl
 8004448:	2000      	movs	r0, #0
 800444a:	f04f 0c0a 	mov.w	ip, #10
 800444e:	4621      	mov	r1, r4
 8004450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004454:	3b30      	subs	r3, #48	@ 0x30
 8004456:	2b09      	cmp	r3, #9
 8004458:	d94b      	bls.n	80044f2 <_vfiprintf_r+0x1a2>
 800445a:	b1b0      	cbz	r0, 800448a <_vfiprintf_r+0x13a>
 800445c:	9207      	str	r2, [sp, #28]
 800445e:	e014      	b.n	800448a <_vfiprintf_r+0x13a>
 8004460:	eba0 0308 	sub.w	r3, r0, r8
 8004464:	fa09 f303 	lsl.w	r3, r9, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	46a2      	mov	sl, r4
 800446e:	e7d2      	b.n	8004416 <_vfiprintf_r+0xc6>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	1d19      	adds	r1, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	9103      	str	r1, [sp, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfbb      	ittet	lt
 800447c:	425b      	neglt	r3, r3
 800447e:	f042 0202 	orrlt.w	r2, r2, #2
 8004482:	9307      	strge	r3, [sp, #28]
 8004484:	9307      	strlt	r3, [sp, #28]
 8004486:	bfb8      	it	lt
 8004488:	9204      	strlt	r2, [sp, #16]
 800448a:	7823      	ldrb	r3, [r4, #0]
 800448c:	2b2e      	cmp	r3, #46	@ 0x2e
 800448e:	d10a      	bne.n	80044a6 <_vfiprintf_r+0x156>
 8004490:	7863      	ldrb	r3, [r4, #1]
 8004492:	2b2a      	cmp	r3, #42	@ 0x2a
 8004494:	d132      	bne.n	80044fc <_vfiprintf_r+0x1ac>
 8004496:	9b03      	ldr	r3, [sp, #12]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	9203      	str	r2, [sp, #12]
 800449e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044a2:	3402      	adds	r4, #2
 80044a4:	9305      	str	r3, [sp, #20]
 80044a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800457c <_vfiprintf_r+0x22c>
 80044aa:	7821      	ldrb	r1, [r4, #0]
 80044ac:	2203      	movs	r2, #3
 80044ae:	4650      	mov	r0, sl
 80044b0:	f7fb feae 	bl	8000210 <memchr>
 80044b4:	b138      	cbz	r0, 80044c6 <_vfiprintf_r+0x176>
 80044b6:	9b04      	ldr	r3, [sp, #16]
 80044b8:	eba0 000a 	sub.w	r0, r0, sl
 80044bc:	2240      	movs	r2, #64	@ 0x40
 80044be:	4082      	lsls	r2, r0
 80044c0:	4313      	orrs	r3, r2
 80044c2:	3401      	adds	r4, #1
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ca:	4829      	ldr	r0, [pc, #164]	@ (8004570 <_vfiprintf_r+0x220>)
 80044cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044d0:	2206      	movs	r2, #6
 80044d2:	f7fb fe9d 	bl	8000210 <memchr>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d03f      	beq.n	800455a <_vfiprintf_r+0x20a>
 80044da:	4b26      	ldr	r3, [pc, #152]	@ (8004574 <_vfiprintf_r+0x224>)
 80044dc:	bb1b      	cbnz	r3, 8004526 <_vfiprintf_r+0x1d6>
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	3307      	adds	r3, #7
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	3308      	adds	r3, #8
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ec:	443b      	add	r3, r7
 80044ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f0:	e76a      	b.n	80043c8 <_vfiprintf_r+0x78>
 80044f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f6:	460c      	mov	r4, r1
 80044f8:	2001      	movs	r0, #1
 80044fa:	e7a8      	b.n	800444e <_vfiprintf_r+0xfe>
 80044fc:	2300      	movs	r3, #0
 80044fe:	3401      	adds	r4, #1
 8004500:	9305      	str	r3, [sp, #20]
 8004502:	4619      	mov	r1, r3
 8004504:	f04f 0c0a 	mov.w	ip, #10
 8004508:	4620      	mov	r0, r4
 800450a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800450e:	3a30      	subs	r2, #48	@ 0x30
 8004510:	2a09      	cmp	r2, #9
 8004512:	d903      	bls.n	800451c <_vfiprintf_r+0x1cc>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0c6      	beq.n	80044a6 <_vfiprintf_r+0x156>
 8004518:	9105      	str	r1, [sp, #20]
 800451a:	e7c4      	b.n	80044a6 <_vfiprintf_r+0x156>
 800451c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004520:	4604      	mov	r4, r0
 8004522:	2301      	movs	r3, #1
 8004524:	e7f0      	b.n	8004508 <_vfiprintf_r+0x1b8>
 8004526:	ab03      	add	r3, sp, #12
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	462a      	mov	r2, r5
 800452c:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <_vfiprintf_r+0x228>)
 800452e:	a904      	add	r1, sp, #16
 8004530:	4630      	mov	r0, r6
 8004532:	f3af 8000 	nop.w
 8004536:	4607      	mov	r7, r0
 8004538:	1c78      	adds	r0, r7, #1
 800453a:	d1d6      	bne.n	80044ea <_vfiprintf_r+0x19a>
 800453c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800453e:	07d9      	lsls	r1, r3, #31
 8004540:	d405      	bmi.n	800454e <_vfiprintf_r+0x1fe>
 8004542:	89ab      	ldrh	r3, [r5, #12]
 8004544:	059a      	lsls	r2, r3, #22
 8004546:	d402      	bmi.n	800454e <_vfiprintf_r+0x1fe>
 8004548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800454a:	f7ff fddd 	bl	8004108 <__retarget_lock_release_recursive>
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	065b      	lsls	r3, r3, #25
 8004552:	f53f af1f 	bmi.w	8004394 <_vfiprintf_r+0x44>
 8004556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004558:	e71e      	b.n	8004398 <_vfiprintf_r+0x48>
 800455a:	ab03      	add	r3, sp, #12
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	462a      	mov	r2, r5
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <_vfiprintf_r+0x228>)
 8004562:	a904      	add	r1, sp, #16
 8004564:	4630      	mov	r0, r6
 8004566:	f000 f879 	bl	800465c <_printf_i>
 800456a:	e7e4      	b.n	8004536 <_vfiprintf_r+0x1e6>
 800456c:	08004ce8 	.word	0x08004ce8
 8004570:	08004cf2 	.word	0x08004cf2
 8004574:	00000000 	.word	0x00000000
 8004578:	0800432b 	.word	0x0800432b
 800457c:	08004cee 	.word	0x08004cee

08004580 <_printf_common>:
 8004580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	4616      	mov	r6, r2
 8004586:	4698      	mov	r8, r3
 8004588:	688a      	ldr	r2, [r1, #8]
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004590:	4293      	cmp	r3, r2
 8004592:	bfb8      	it	lt
 8004594:	4613      	movlt	r3, r2
 8004596:	6033      	str	r3, [r6, #0]
 8004598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800459c:	4607      	mov	r7, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	b10a      	cbz	r2, 80045a6 <_printf_common+0x26>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	0699      	lsls	r1, r3, #26
 80045aa:	bf42      	ittt	mi
 80045ac:	6833      	ldrmi	r3, [r6, #0]
 80045ae:	3302      	addmi	r3, #2
 80045b0:	6033      	strmi	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d106      	bne.n	80045c8 <_printf_common+0x48>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	6832      	ldr	r2, [r6, #0]
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dc26      	bgt.n	8004616 <_printf_common+0x96>
 80045c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	3b00      	subs	r3, #0
 80045d0:	bf18      	it	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	0692      	lsls	r2, r2, #26
 80045d6:	d42b      	bmi.n	8004630 <_printf_common+0xb0>
 80045d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045dc:	4641      	mov	r1, r8
 80045de:	4638      	mov	r0, r7
 80045e0:	47c8      	blx	r9
 80045e2:	3001      	adds	r0, #1
 80045e4:	d01e      	beq.n	8004624 <_printf_common+0xa4>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf02      	ittt	eq
 80045f2:	68e5      	ldreq	r5, [r4, #12]
 80045f4:	6833      	ldreq	r3, [r6, #0]
 80045f6:	1aed      	subeq	r5, r5, r3
 80045f8:	68a3      	ldr	r3, [r4, #8]
 80045fa:	bf0c      	ite	eq
 80045fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004600:	2500      	movne	r5, #0
 8004602:	4293      	cmp	r3, r2
 8004604:	bfc4      	itt	gt
 8004606:	1a9b      	subgt	r3, r3, r2
 8004608:	18ed      	addgt	r5, r5, r3
 800460a:	2600      	movs	r6, #0
 800460c:	341a      	adds	r4, #26
 800460e:	42b5      	cmp	r5, r6
 8004610:	d11a      	bne.n	8004648 <_printf_common+0xc8>
 8004612:	2000      	movs	r0, #0
 8004614:	e008      	b.n	8004628 <_printf_common+0xa8>
 8004616:	2301      	movs	r3, #1
 8004618:	4652      	mov	r2, sl
 800461a:	4641      	mov	r1, r8
 800461c:	4638      	mov	r0, r7
 800461e:	47c8      	blx	r9
 8004620:	3001      	adds	r0, #1
 8004622:	d103      	bne.n	800462c <_printf_common+0xac>
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462c:	3501      	adds	r5, #1
 800462e:	e7c6      	b.n	80045be <_printf_common+0x3e>
 8004630:	18e1      	adds	r1, r4, r3
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	2030      	movs	r0, #48	@ 0x30
 8004636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800463a:	4422      	add	r2, r4
 800463c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004644:	3302      	adds	r3, #2
 8004646:	e7c7      	b.n	80045d8 <_printf_common+0x58>
 8004648:	2301      	movs	r3, #1
 800464a:	4622      	mov	r2, r4
 800464c:	4641      	mov	r1, r8
 800464e:	4638      	mov	r0, r7
 8004650:	47c8      	blx	r9
 8004652:	3001      	adds	r0, #1
 8004654:	d0e6      	beq.n	8004624 <_printf_common+0xa4>
 8004656:	3601      	adds	r6, #1
 8004658:	e7d9      	b.n	800460e <_printf_common+0x8e>
	...

0800465c <_printf_i>:
 800465c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	7e0f      	ldrb	r7, [r1, #24]
 8004662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004664:	2f78      	cmp	r7, #120	@ 0x78
 8004666:	4691      	mov	r9, r2
 8004668:	4680      	mov	r8, r0
 800466a:	460c      	mov	r4, r1
 800466c:	469a      	mov	sl, r3
 800466e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004672:	d807      	bhi.n	8004684 <_printf_i+0x28>
 8004674:	2f62      	cmp	r7, #98	@ 0x62
 8004676:	d80a      	bhi.n	800468e <_printf_i+0x32>
 8004678:	2f00      	cmp	r7, #0
 800467a:	f000 80d1 	beq.w	8004820 <_printf_i+0x1c4>
 800467e:	2f58      	cmp	r7, #88	@ 0x58
 8004680:	f000 80b8 	beq.w	80047f4 <_printf_i+0x198>
 8004684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800468c:	e03a      	b.n	8004704 <_printf_i+0xa8>
 800468e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004692:	2b15      	cmp	r3, #21
 8004694:	d8f6      	bhi.n	8004684 <_printf_i+0x28>
 8004696:	a101      	add	r1, pc, #4	@ (adr r1, 800469c <_printf_i+0x40>)
 8004698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	08004709 	.word	0x08004709
 80046a4:	08004685 	.word	0x08004685
 80046a8:	08004685 	.word	0x08004685
 80046ac:	08004685 	.word	0x08004685
 80046b0:	08004685 	.word	0x08004685
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004685 	.word	0x08004685
 80046bc:	08004685 	.word	0x08004685
 80046c0:	08004685 	.word	0x08004685
 80046c4:	08004685 	.word	0x08004685
 80046c8:	08004807 	.word	0x08004807
 80046cc:	08004733 	.word	0x08004733
 80046d0:	080047c1 	.word	0x080047c1
 80046d4:	08004685 	.word	0x08004685
 80046d8:	08004685 	.word	0x08004685
 80046dc:	08004829 	.word	0x08004829
 80046e0:	08004685 	.word	0x08004685
 80046e4:	08004733 	.word	0x08004733
 80046e8:	08004685 	.word	0x08004685
 80046ec:	08004685 	.word	0x08004685
 80046f0:	080047c9 	.word	0x080047c9
 80046f4:	6833      	ldr	r3, [r6, #0]
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6032      	str	r2, [r6, #0]
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004704:	2301      	movs	r3, #1
 8004706:	e09c      	b.n	8004842 <_printf_i+0x1e6>
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	6031      	str	r1, [r6, #0]
 8004710:	0606      	lsls	r6, r0, #24
 8004712:	d501      	bpl.n	8004718 <_printf_i+0xbc>
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	e003      	b.n	8004720 <_printf_i+0xc4>
 8004718:	0645      	lsls	r5, r0, #25
 800471a:	d5fb      	bpl.n	8004714 <_printf_i+0xb8>
 800471c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004720:	2d00      	cmp	r5, #0
 8004722:	da03      	bge.n	800472c <_printf_i+0xd0>
 8004724:	232d      	movs	r3, #45	@ 0x2d
 8004726:	426d      	negs	r5, r5
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800472c:	4858      	ldr	r0, [pc, #352]	@ (8004890 <_printf_i+0x234>)
 800472e:	230a      	movs	r3, #10
 8004730:	e011      	b.n	8004756 <_printf_i+0xfa>
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	0608      	lsls	r0, r1, #24
 8004738:	f853 5b04 	ldr.w	r5, [r3], #4
 800473c:	d402      	bmi.n	8004744 <_printf_i+0xe8>
 800473e:	0649      	lsls	r1, r1, #25
 8004740:	bf48      	it	mi
 8004742:	b2ad      	uxthmi	r5, r5
 8004744:	2f6f      	cmp	r7, #111	@ 0x6f
 8004746:	4852      	ldr	r0, [pc, #328]	@ (8004890 <_printf_i+0x234>)
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	bf14      	ite	ne
 800474c:	230a      	movne	r3, #10
 800474e:	2308      	moveq	r3, #8
 8004750:	2100      	movs	r1, #0
 8004752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004756:	6866      	ldr	r6, [r4, #4]
 8004758:	60a6      	str	r6, [r4, #8]
 800475a:	2e00      	cmp	r6, #0
 800475c:	db05      	blt.n	800476a <_printf_i+0x10e>
 800475e:	6821      	ldr	r1, [r4, #0]
 8004760:	432e      	orrs	r6, r5
 8004762:	f021 0104 	bic.w	r1, r1, #4
 8004766:	6021      	str	r1, [r4, #0]
 8004768:	d04b      	beq.n	8004802 <_printf_i+0x1a6>
 800476a:	4616      	mov	r6, r2
 800476c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004770:	fb03 5711 	mls	r7, r3, r1, r5
 8004774:	5dc7      	ldrb	r7, [r0, r7]
 8004776:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800477a:	462f      	mov	r7, r5
 800477c:	42bb      	cmp	r3, r7
 800477e:	460d      	mov	r5, r1
 8004780:	d9f4      	bls.n	800476c <_printf_i+0x110>
 8004782:	2b08      	cmp	r3, #8
 8004784:	d10b      	bne.n	800479e <_printf_i+0x142>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	07df      	lsls	r7, r3, #31
 800478a:	d508      	bpl.n	800479e <_printf_i+0x142>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6861      	ldr	r1, [r4, #4]
 8004790:	4299      	cmp	r1, r3
 8004792:	bfde      	ittt	le
 8004794:	2330      	movle	r3, #48	@ 0x30
 8004796:	f806 3c01 	strble.w	r3, [r6, #-1]
 800479a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800479e:	1b92      	subs	r2, r2, r6
 80047a0:	6122      	str	r2, [r4, #16]
 80047a2:	f8cd a000 	str.w	sl, [sp]
 80047a6:	464b      	mov	r3, r9
 80047a8:	aa03      	add	r2, sp, #12
 80047aa:	4621      	mov	r1, r4
 80047ac:	4640      	mov	r0, r8
 80047ae:	f7ff fee7 	bl	8004580 <_printf_common>
 80047b2:	3001      	adds	r0, #1
 80047b4:	d14a      	bne.n	800484c <_printf_i+0x1f0>
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	b004      	add	sp, #16
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	4832      	ldr	r0, [pc, #200]	@ (8004894 <_printf_i+0x238>)
 80047ca:	2778      	movs	r7, #120	@ 0x78
 80047cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	6831      	ldr	r1, [r6, #0]
 80047d4:	061f      	lsls	r7, r3, #24
 80047d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047da:	d402      	bmi.n	80047e2 <_printf_i+0x186>
 80047dc:	065f      	lsls	r7, r3, #25
 80047de:	bf48      	it	mi
 80047e0:	b2ad      	uxthmi	r5, r5
 80047e2:	6031      	str	r1, [r6, #0]
 80047e4:	07d9      	lsls	r1, r3, #31
 80047e6:	bf44      	itt	mi
 80047e8:	f043 0320 	orrmi.w	r3, r3, #32
 80047ec:	6023      	strmi	r3, [r4, #0]
 80047ee:	b11d      	cbz	r5, 80047f8 <_printf_i+0x19c>
 80047f0:	2310      	movs	r3, #16
 80047f2:	e7ad      	b.n	8004750 <_printf_i+0xf4>
 80047f4:	4826      	ldr	r0, [pc, #152]	@ (8004890 <_printf_i+0x234>)
 80047f6:	e7e9      	b.n	80047cc <_printf_i+0x170>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	f023 0320 	bic.w	r3, r3, #32
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	e7f6      	b.n	80047f0 <_printf_i+0x194>
 8004802:	4616      	mov	r6, r2
 8004804:	e7bd      	b.n	8004782 <_printf_i+0x126>
 8004806:	6833      	ldr	r3, [r6, #0]
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	6961      	ldr	r1, [r4, #20]
 800480c:	1d18      	adds	r0, r3, #4
 800480e:	6030      	str	r0, [r6, #0]
 8004810:	062e      	lsls	r6, r5, #24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	d501      	bpl.n	800481a <_printf_i+0x1be>
 8004816:	6019      	str	r1, [r3, #0]
 8004818:	e002      	b.n	8004820 <_printf_i+0x1c4>
 800481a:	0668      	lsls	r0, r5, #25
 800481c:	d5fb      	bpl.n	8004816 <_printf_i+0x1ba>
 800481e:	8019      	strh	r1, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	4616      	mov	r6, r2
 8004826:	e7bc      	b.n	80047a2 <_printf_i+0x146>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	6032      	str	r2, [r6, #0]
 800482e:	681e      	ldr	r6, [r3, #0]
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	2100      	movs	r1, #0
 8004834:	4630      	mov	r0, r6
 8004836:	f7fb fceb 	bl	8000210 <memchr>
 800483a:	b108      	cbz	r0, 8004840 <_printf_i+0x1e4>
 800483c:	1b80      	subs	r0, r0, r6
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800484a:	e7aa      	b.n	80047a2 <_printf_i+0x146>
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	4632      	mov	r2, r6
 8004850:	4649      	mov	r1, r9
 8004852:	4640      	mov	r0, r8
 8004854:	47d0      	blx	sl
 8004856:	3001      	adds	r0, #1
 8004858:	d0ad      	beq.n	80047b6 <_printf_i+0x15a>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	079b      	lsls	r3, r3, #30
 800485e:	d413      	bmi.n	8004888 <_printf_i+0x22c>
 8004860:	68e0      	ldr	r0, [r4, #12]
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	4298      	cmp	r0, r3
 8004866:	bfb8      	it	lt
 8004868:	4618      	movlt	r0, r3
 800486a:	e7a6      	b.n	80047ba <_printf_i+0x15e>
 800486c:	2301      	movs	r3, #1
 800486e:	4632      	mov	r2, r6
 8004870:	4649      	mov	r1, r9
 8004872:	4640      	mov	r0, r8
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d09d      	beq.n	80047b6 <_printf_i+0x15a>
 800487a:	3501      	adds	r5, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	1a5b      	subs	r3, r3, r1
 8004882:	42ab      	cmp	r3, r5
 8004884:	dcf2      	bgt.n	800486c <_printf_i+0x210>
 8004886:	e7eb      	b.n	8004860 <_printf_i+0x204>
 8004888:	2500      	movs	r5, #0
 800488a:	f104 0619 	add.w	r6, r4, #25
 800488e:	e7f5      	b.n	800487c <_printf_i+0x220>
 8004890:	08004cf9 	.word	0x08004cf9
 8004894:	08004d0a 	.word	0x08004d0a

08004898 <__sflush_r>:
 8004898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a0:	0716      	lsls	r6, r2, #28
 80048a2:	4605      	mov	r5, r0
 80048a4:	460c      	mov	r4, r1
 80048a6:	d454      	bmi.n	8004952 <__sflush_r+0xba>
 80048a8:	684b      	ldr	r3, [r1, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dc02      	bgt.n	80048b4 <__sflush_r+0x1c>
 80048ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dd48      	ble.n	8004946 <__sflush_r+0xae>
 80048b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d045      	beq.n	8004946 <__sflush_r+0xae>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048c0:	682f      	ldr	r7, [r5, #0]
 80048c2:	6a21      	ldr	r1, [r4, #32]
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	d030      	beq.n	800492a <__sflush_r+0x92>
 80048c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	0759      	lsls	r1, r3, #29
 80048ce:	d505      	bpl.n	80048dc <__sflush_r+0x44>
 80048d0:	6863      	ldr	r3, [r4, #4]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048d6:	b10b      	cbz	r3, 80048dc <__sflush_r+0x44>
 80048d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048e0:	6a21      	ldr	r1, [r4, #32]
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b0      	blx	r6
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	d106      	bne.n	80048fa <__sflush_r+0x62>
 80048ec:	6829      	ldr	r1, [r5, #0]
 80048ee:	291d      	cmp	r1, #29
 80048f0:	d82b      	bhi.n	800494a <__sflush_r+0xb2>
 80048f2:	4a2a      	ldr	r2, [pc, #168]	@ (800499c <__sflush_r+0x104>)
 80048f4:	40ca      	lsrs	r2, r1
 80048f6:	07d6      	lsls	r6, r2, #31
 80048f8:	d527      	bpl.n	800494a <__sflush_r+0xb2>
 80048fa:	2200      	movs	r2, #0
 80048fc:	6062      	str	r2, [r4, #4]
 80048fe:	04d9      	lsls	r1, r3, #19
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	6022      	str	r2, [r4, #0]
 8004904:	d504      	bpl.n	8004910 <__sflush_r+0x78>
 8004906:	1c42      	adds	r2, r0, #1
 8004908:	d101      	bne.n	800490e <__sflush_r+0x76>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	b903      	cbnz	r3, 8004910 <__sflush_r+0x78>
 800490e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004912:	602f      	str	r7, [r5, #0]
 8004914:	b1b9      	cbz	r1, 8004946 <__sflush_r+0xae>
 8004916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800491a:	4299      	cmp	r1, r3
 800491c:	d002      	beq.n	8004924 <__sflush_r+0x8c>
 800491e:	4628      	mov	r0, r5
 8004920:	f7ff fbf4 	bl	800410c <_free_r>
 8004924:	2300      	movs	r3, #0
 8004926:	6363      	str	r3, [r4, #52]	@ 0x34
 8004928:	e00d      	b.n	8004946 <__sflush_r+0xae>
 800492a:	2301      	movs	r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	4602      	mov	r2, r0
 8004932:	1c50      	adds	r0, r2, #1
 8004934:	d1c9      	bne.n	80048ca <__sflush_r+0x32>
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c6      	beq.n	80048ca <__sflush_r+0x32>
 800493c:	2b1d      	cmp	r3, #29
 800493e:	d001      	beq.n	8004944 <__sflush_r+0xac>
 8004940:	2b16      	cmp	r3, #22
 8004942:	d11e      	bne.n	8004982 <__sflush_r+0xea>
 8004944:	602f      	str	r7, [r5, #0]
 8004946:	2000      	movs	r0, #0
 8004948:	e022      	b.n	8004990 <__sflush_r+0xf8>
 800494a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800494e:	b21b      	sxth	r3, r3
 8004950:	e01b      	b.n	800498a <__sflush_r+0xf2>
 8004952:	690f      	ldr	r7, [r1, #16]
 8004954:	2f00      	cmp	r7, #0
 8004956:	d0f6      	beq.n	8004946 <__sflush_r+0xae>
 8004958:	0793      	lsls	r3, r2, #30
 800495a:	680e      	ldr	r6, [r1, #0]
 800495c:	bf08      	it	eq
 800495e:	694b      	ldreq	r3, [r1, #20]
 8004960:	600f      	str	r7, [r1, #0]
 8004962:	bf18      	it	ne
 8004964:	2300      	movne	r3, #0
 8004966:	eba6 0807 	sub.w	r8, r6, r7
 800496a:	608b      	str	r3, [r1, #8]
 800496c:	f1b8 0f00 	cmp.w	r8, #0
 8004970:	dde9      	ble.n	8004946 <__sflush_r+0xae>
 8004972:	6a21      	ldr	r1, [r4, #32]
 8004974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004976:	4643      	mov	r3, r8
 8004978:	463a      	mov	r2, r7
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	2800      	cmp	r0, #0
 8004980:	dc08      	bgt.n	8004994 <__sflush_r+0xfc>
 8004982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004994:	4407      	add	r7, r0
 8004996:	eba8 0800 	sub.w	r8, r8, r0
 800499a:	e7e7      	b.n	800496c <__sflush_r+0xd4>
 800499c:	20400001 	.word	0x20400001

080049a0 <_fflush_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	690b      	ldr	r3, [r1, #16]
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b913      	cbnz	r3, 80049b0 <_fflush_r+0x10>
 80049aa:	2500      	movs	r5, #0
 80049ac:	4628      	mov	r0, r5
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	b118      	cbz	r0, 80049ba <_fflush_r+0x1a>
 80049b2:	6a03      	ldr	r3, [r0, #32]
 80049b4:	b90b      	cbnz	r3, 80049ba <_fflush_r+0x1a>
 80049b6:	f7ff faa1 	bl	8003efc <__sinit>
 80049ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f3      	beq.n	80049aa <_fflush_r+0xa>
 80049c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049c4:	07d0      	lsls	r0, r2, #31
 80049c6:	d404      	bmi.n	80049d2 <_fflush_r+0x32>
 80049c8:	0599      	lsls	r1, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_fflush_r+0x32>
 80049cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ce:	f7ff fb9a 	bl	8004106 <__retarget_lock_acquire_recursive>
 80049d2:	4628      	mov	r0, r5
 80049d4:	4621      	mov	r1, r4
 80049d6:	f7ff ff5f 	bl	8004898 <__sflush_r>
 80049da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049dc:	07da      	lsls	r2, r3, #31
 80049de:	4605      	mov	r5, r0
 80049e0:	d4e4      	bmi.n	80049ac <_fflush_r+0xc>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	059b      	lsls	r3, r3, #22
 80049e6:	d4e1      	bmi.n	80049ac <_fflush_r+0xc>
 80049e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ea:	f7ff fb8d 	bl	8004108 <__retarget_lock_release_recursive>
 80049ee:	e7dd      	b.n	80049ac <_fflush_r+0xc>

080049f0 <__swbuf_r>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	460e      	mov	r6, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	4605      	mov	r5, r0
 80049f8:	b118      	cbz	r0, 8004a02 <__swbuf_r+0x12>
 80049fa:	6a03      	ldr	r3, [r0, #32]
 80049fc:	b90b      	cbnz	r3, 8004a02 <__swbuf_r+0x12>
 80049fe:	f7ff fa7d 	bl	8003efc <__sinit>
 8004a02:	69a3      	ldr	r3, [r4, #24]
 8004a04:	60a3      	str	r3, [r4, #8]
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	071a      	lsls	r2, r3, #28
 8004a0a:	d501      	bpl.n	8004a10 <__swbuf_r+0x20>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	b943      	cbnz	r3, 8004a22 <__swbuf_r+0x32>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	f000 f82a 	bl	8004a6c <__swsetup_r>
 8004a18:	b118      	cbz	r0, 8004a22 <__swbuf_r+0x32>
 8004a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a1e:	4638      	mov	r0, r7
 8004a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	6922      	ldr	r2, [r4, #16]
 8004a26:	1a98      	subs	r0, r3, r2
 8004a28:	6963      	ldr	r3, [r4, #20]
 8004a2a:	b2f6      	uxtb	r6, r6
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	4637      	mov	r7, r6
 8004a30:	dc05      	bgt.n	8004a3e <__swbuf_r+0x4e>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f7ff ffb3 	bl	80049a0 <_fflush_r>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d1ed      	bne.n	8004a1a <__swbuf_r+0x2a>
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60a3      	str	r3, [r4, #8]
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	6022      	str	r2, [r4, #0]
 8004a4a:	701e      	strb	r6, [r3, #0]
 8004a4c:	6962      	ldr	r2, [r4, #20]
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d004      	beq.n	8004a5e <__swbuf_r+0x6e>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	07db      	lsls	r3, r3, #31
 8004a58:	d5e1      	bpl.n	8004a1e <__swbuf_r+0x2e>
 8004a5a:	2e0a      	cmp	r6, #10
 8004a5c:	d1df      	bne.n	8004a1e <__swbuf_r+0x2e>
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f7ff ff9d 	bl	80049a0 <_fflush_r>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0d9      	beq.n	8004a1e <__swbuf_r+0x2e>
 8004a6a:	e7d6      	b.n	8004a1a <__swbuf_r+0x2a>

08004a6c <__swsetup_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <__swsetup_r+0xa8>)
 8004a70:	4605      	mov	r5, r0
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	460c      	mov	r4, r1
 8004a76:	b118      	cbz	r0, 8004a80 <__swsetup_r+0x14>
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <__swsetup_r+0x14>
 8004a7c:	f7ff fa3e 	bl	8003efc <__sinit>
 8004a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a84:	0719      	lsls	r1, r3, #28
 8004a86:	d422      	bmi.n	8004ace <__swsetup_r+0x62>
 8004a88:	06da      	lsls	r2, r3, #27
 8004a8a:	d407      	bmi.n	8004a9c <__swsetup_r+0x30>
 8004a8c:	2209      	movs	r2, #9
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9a:	e033      	b.n	8004b04 <__swsetup_r+0x98>
 8004a9c:	0758      	lsls	r0, r3, #29
 8004a9e:	d512      	bpl.n	8004ac6 <__swsetup_r+0x5a>
 8004aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aa2:	b141      	cbz	r1, 8004ab6 <__swsetup_r+0x4a>
 8004aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d002      	beq.n	8004ab2 <__swsetup_r+0x46>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f7ff fb2d 	bl	800410c <_free_r>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	b94b      	cbnz	r3, 8004ae6 <__swsetup_r+0x7a>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004adc:	d003      	beq.n	8004ae6 <__swsetup_r+0x7a>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f84f 	bl	8004b84 <__smakebuf_r>
 8004ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aea:	f013 0201 	ands.w	r2, r3, #1
 8004aee:	d00a      	beq.n	8004b06 <__swsetup_r+0x9a>
 8004af0:	2200      	movs	r2, #0
 8004af2:	60a2      	str	r2, [r4, #8]
 8004af4:	6962      	ldr	r2, [r4, #20]
 8004af6:	4252      	negs	r2, r2
 8004af8:	61a2      	str	r2, [r4, #24]
 8004afa:	6922      	ldr	r2, [r4, #16]
 8004afc:	b942      	cbnz	r2, 8004b10 <__swsetup_r+0xa4>
 8004afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b02:	d1c5      	bne.n	8004a90 <__swsetup_r+0x24>
 8004b04:	bd38      	pop	{r3, r4, r5, pc}
 8004b06:	0799      	lsls	r1, r3, #30
 8004b08:	bf58      	it	pl
 8004b0a:	6962      	ldrpl	r2, [r4, #20]
 8004b0c:	60a2      	str	r2, [r4, #8]
 8004b0e:	e7f4      	b.n	8004afa <__swsetup_r+0x8e>
 8004b10:	2000      	movs	r0, #0
 8004b12:	e7f7      	b.n	8004b04 <__swsetup_r+0x98>
 8004b14:	2000001c 	.word	0x2000001c

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d06      	ldr	r5, [pc, #24]	@ (8004b34 <_sbrk_r+0x1c>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f7fc fbda 	bl	80012dc <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	200005fc 	.word	0x200005fc

08004b38 <__swhatbuf_r>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b40:	2900      	cmp	r1, #0
 8004b42:	b096      	sub	sp, #88	@ 0x58
 8004b44:	4615      	mov	r5, r2
 8004b46:	461e      	mov	r6, r3
 8004b48:	da0d      	bge.n	8004b66 <__swhatbuf_r+0x2e>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	bf14      	ite	ne
 8004b56:	2340      	movne	r3, #64	@ 0x40
 8004b58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	6031      	str	r1, [r6, #0]
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	b016      	add	sp, #88	@ 0x58
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	466a      	mov	r2, sp
 8004b68:	f000 f848 	bl	8004bfc <_fstat_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	dbec      	blt.n	8004b4a <__swhatbuf_r+0x12>
 8004b70:	9901      	ldr	r1, [sp, #4]
 8004b72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b7a:	4259      	negs	r1, r3
 8004b7c:	4159      	adcs	r1, r3
 8004b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b82:	e7eb      	b.n	8004b5c <__swhatbuf_r+0x24>

08004b84 <__smakebuf_r>:
 8004b84:	898b      	ldrh	r3, [r1, #12]
 8004b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b88:	079d      	lsls	r5, r3, #30
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	d507      	bpl.n	8004ba0 <__smakebuf_r+0x1c>
 8004b90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	6163      	str	r3, [r4, #20]
 8004b9c:	b003      	add	sp, #12
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba0:	ab01      	add	r3, sp, #4
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f7ff ffc8 	bl	8004b38 <__swhatbuf_r>
 8004ba8:	9f00      	ldr	r7, [sp, #0]
 8004baa:	4605      	mov	r5, r0
 8004bac:	4639      	mov	r1, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff fb18 	bl	80041e4 <_malloc_r>
 8004bb4:	b948      	cbnz	r0, 8004bca <__smakebuf_r+0x46>
 8004bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bba:	059a      	lsls	r2, r3, #22
 8004bbc:	d4ee      	bmi.n	8004b9c <__smakebuf_r+0x18>
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	e7e2      	b.n	8004b90 <__smakebuf_r+0xc>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	6020      	str	r0, [r4, #0]
 8004bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bda:	b15b      	cbz	r3, 8004bf4 <__smakebuf_r+0x70>
 8004bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f81d 	bl	8004c20 <_isatty_r>
 8004be6:	b128      	cbz	r0, 8004bf4 <__smakebuf_r+0x70>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	431d      	orrs	r5, r3
 8004bf8:	81a5      	strh	r5, [r4, #12]
 8004bfa:	e7cf      	b.n	8004b9c <__smakebuf_r+0x18>

08004bfc <_fstat_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d07      	ldr	r5, [pc, #28]	@ (8004c1c <_fstat_r+0x20>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	f7fc fb3e 	bl	800128a <_fstat>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d102      	bne.n	8004c18 <_fstat_r+0x1c>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	b103      	cbz	r3, 8004c18 <_fstat_r+0x1c>
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200005fc 	.word	0x200005fc

08004c20 <_isatty_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	@ (8004c3c <_isatty_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fb3d 	bl	80012aa <_isatty>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_isatty_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_isatty_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	200005fc 	.word	0x200005fc

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
